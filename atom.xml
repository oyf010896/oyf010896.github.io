<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帆大腿的博客</title>
  
  <subtitle>爱榕榕爱做饭给你吃</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-13T07:59:03.964Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>帆大腿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx平滑升级</title>
    <link href="http://example.com/2022/10/13/ferry/"/>
    <id>http://example.com/2022/10/13/ferry/</id>
    <published>2022-10-13T03:13:29.000Z</published>
    <updated>2022-10-13T07:59:03.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装工单系统"><a href="#安装工单系统" class="headerlink" title="安装工单系统"></a>安装工单系统</h1><p>开源系统参考：<a href="https://www.fdevops.com/docs/ferry-tutorial-document/docker-ferry-install">https://www.fdevops.com/docs/ferry-tutorial-document/docker-ferry-install</a></p><h2 id="1-安装Docker"><a href="#1-安装Docker" class="headerlink" title="1. 安装Docker"></a>1. 安装Docker</h2><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS 7安装yum源如下：</span></span><br><span class="line">[root@localhost ~]<span class="comment">#yum -y update</span></span><br><span class="line">yum -y update：升级所有包同时也升级软件和系统内核；</span><br><span class="line">yum -y upgrade：只升级所有包，不升级软件和系统内核</span><br><span class="line">卸载旧版本（如果之前安装过的话）</span><br><span class="line"><span class="comment"># 卸载旧版本（如果之前安装过的话）</span></span><br><span class="line">[root@localhost ~]<span class="comment">#yum remove docker  docker-common docker-selinux docker-engine</span></span><br><span class="line"><span class="comment"># 安装需要的软件包， yum-util 提供yum-config-manager功能，另两个是devicemapper驱动依赖</span></span><br><span class="line">[root@localhost ~]<span class="comment">#yum install -y yum-utils device-mapper-persistent-data lvm2 git yum install bind-utils</span></span><br><span class="line"><span class="comment"># 设置yum源(这里使用的阿里云镜像源地址)</span></span><br><span class="line">[root@localhost ~]<span class="comment">#yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># 查看docker的版本，可以选择指定版本安装</span></span><br><span class="line">[root@localhost ~]<span class="comment">#yum list docker-ce --showduplicates | sort -r</span></span><br><span class="line"><span class="comment"># 安装Docker</span></span><br><span class="line">[root@localhost ~]<span class="comment">#yum install docker-ce-20.10.* docker-ce-cli-20.10.* -y</span></span><br><span class="line"><span class="comment"># 验证是否是安装成功</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.17</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.17.11</span><br><span class="line"> Git commit:        100c701</span><br><span class="line"> Built:             Mon Jun  6 23:05:12 2022</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl status docker</span></span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">[root@localhost ~]<span class="comment"># service docker start</span></span><br><span class="line"><span class="comment"># 设置开机自启动Docker：</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable --now docker</span></span><br><span class="line"><span class="comment"># 停止docker</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl stop docker</span></span><br><span class="line"><span class="comment"># 添加阿里云的镜像加速</span></span><br><span class="line">[root@node ~]<span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;<span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>,<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>]&#125;</span><br><span class="line"><span class="comment"># 如果阿里源设置不成功，清华源设置参考：https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/</span></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-在Docker上部署ferry"><a href="#2-在Docker上部署ferry" class="headerlink" title="2. 在Docker上部署ferry"></a>2. 在Docker上部署ferry</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建相关服务文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/ferry/mysql/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/ferry/mysql/config</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/ferry/redis/config</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/ferry/redis/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/ferry/ferry/config</span><br><span class="line">[root@localhost ~]<span class="comment"># cd /data/ferry/ferry/config</span></span><br><span class="line">[root@localhost ~]<span class="comment"># touch needinit</span></span><br><span class="line"></span><br><span class="line">redis密码：reidsWqYKcQ</span><br><span class="line">mysql密码: mysql123zxcpD6Q</span><br><span class="line"><span class="comment">### 配置redis conf文件</span></span><br><span class="line">[root@docker config]<span class="comment"># pwd</span></span><br><span class="line">/data/ferry/redis/config</span><br><span class="line"></span><br><span class="line">[root@docker config]<span class="comment"># vim redis.conf</span></span><br><span class="line">[root@docker config]<span class="comment"># cat redis.conf </span></span><br><span class="line">daemonize no</span><br><span class="line"><span class="comment">#bind 127.0.0.1</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="built_in">timeout</span> 300</span><br><span class="line">loglevel notice</span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">rdbcompression <span class="built_in">yes</span></span><br><span class="line"><span class="built_in">dir</span> /data</span><br><span class="line"><span class="comment"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br><span class="line">maxclients 20480</span><br><span class="line">maxmemory 2g</span><br><span class="line">maxmemory-policy allkeys-lru</span><br><span class="line">appendonly no</span><br><span class="line"><span class="comment">#appendfilename</span></span><br><span class="line"><span class="comment"># appendfsync always</span></span><br><span class="line"><span class="comment"># appendfsync everysec</span></span><br><span class="line">appendfsync no</span><br><span class="line">requirepass reidsWqYKcQ</span><br><span class="line"></span><br><span class="line"><span class="comment">### 配置 mysqld.cnf 文件</span></span><br><span class="line">[root@docker config]<span class="comment"># pwd</span></span><br><span class="line">/data/ferry/mysql/config</span><br><span class="line">[root@docker config]<span class="comment"># cat mysqld.cnf </span></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_general_ci</span><br><span class="line">sql_mode=<span class="string">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;</span></span><br><span class="line">pid-file    = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket      = /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir     = /var/lib/mysql</span><br><span class="line">symbolic-links=0</span><br><span class="line">lower_case_table_names=1</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">socket      = /var/run/mysqld/mysqld.sock</span><br><span class="line"></span><br><span class="line"><span class="comment">### docker运行mysql</span></span><br><span class="line">docker pull mysql:5.7.27</span><br><span class="line"></span><br><span class="line">docker run -d --name mysql --restart=always -p 3306:3306 -v /data/ferry/mysql/data:/var/lib/mysql -v /data/ferry/mysql/config/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf -e TZ=Asia/Shanghai -e MYSQL_ROOT_PASSWORD=mysql123zxcpD6Q -e MYSQL_ROOT_HOST=% -e MYSQL_DATABASE=ferry   mysql:5.7.27</span><br><span class="line"></span><br><span class="line"><span class="comment">### 运行redis</span></span><br><span class="line">docker pull redis:6.2.7</span><br><span class="line"></span><br><span class="line">docker run --name redis -d  -p 6379:6379 -v /etc/localtime:/etc/localtime -v /data/ferry/redis/config/redis.conf:/etc/redis/redis.conf -v /data/ferry/redis/data:/data  redis:6.2.7  redis-server /etc/redis/redis.conf --appendonly <span class="built_in">yes</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">### 运行ferry 1.0.6</span></span><br><span class="line"></span><br><span class="line">docker run -itd --name ferry -v /etc/localtime:/etc/localtime -v /data/ferry/ferry/config:/opt/workflow/ferry/config -p 8002:8002 lanyulei/ferry:1.0.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker run -itd --name ferry -v /data/ferry/ferry/config:/opt/workflow/ferry/config -p 8080:8002 lanyulei/ferry:1.0.6</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">rm</span> -f   ferry    -f</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">rm</span> -f  container <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">docker logs ferry</span><br><span class="line"></span><br><span class="line">docker restart redis</span><br><span class="line"></span><br><span class="line">docker restart ferry</span><br><span class="line"></span><br><span class="line">docker restart mysql</span><br><span class="line"></span><br><span class="line">systemctl restart docker.service</span><br><span class="line"></span><br><span class="line">systemctl status docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 磁盘挂载</span></span><br><span class="line"><span class="comment"># 如果本身有data目录的话就换个位置 或者先把data的数据mv到其他位置，mv /data /databak 挂载完之后 cp -r /databak/* /data，可以直接挂载，之前/data里面的数据无法看到</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@~]<span class="comment"># pvcreate /dev/sda</span></span><br><span class="line">[root@~]<span class="comment"># vgcreate vg01 /dev/sda</span></span><br><span class="line">[root@~]<span class="comment"># lvcreate -l 100%VG -n lv01 vg01</span></span><br><span class="line">[root@~]<span class="comment"># mkfs.xfs /dev/vg01/lv01</span></span><br><span class="line">[root@~]<span class="comment"># mkdir /data</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/fstab &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">/dev/vg01/lv01 /data xfs defaults 0 0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">[root@~]<span class="comment"># mount -a</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建挂载目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/ferry/mysql</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/ferry/mysql/config</span><br><span class="line"></span><br><span class="line"><span class="comment">#上传mysqld.cnf到/data/ferry/mysql/config目录下 (配置文件)</span></span><br><span class="line"><span class="comment">#上传mysqldump.cnf到/data/ferry/mysql/config目录下(去除备份数据库的警告)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动MySQL服务</span></span><br><span class="line">docker run -d --name mysql --restart=always -p 3306:3306 -p 33030:33030 -v /data/ferry/mysql:/var/lib/mysql -v /data/ferry/mysql/config/mysqldump.cnf:/etc/mysql/conf.d/mysqldump.cnf -v /data/ferry/mysql/config/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf -e TZ=Asia/Shanghai -e MYSQL_ROOT_PASSWORD=mysql123zxcpD6Q --network=net-shouhou mysql:5.7.30</span><br><span class="line"></span><br><span class="line">2.备份数据</span><br><span class="line">//创建备份目录</span><br><span class="line"><span class="built_in">mkdir</span> -p /backupdata/mysql/</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> mysql sh -c <span class="string">&#x27;exec mysqldump --all-databases -uroot -pmysql123zxcpD6Q&#x27;</span> &gt;  /backupdata/mysql/all-databases.sql</span><br><span class="line"><span class="comment">#修改mysql配置文件mysqldump.cnf后可以解决备份时的警告,使用一下命令备份</span></span><br><span class="line">docker <span class="built_in">exec</span> mysql sh -c <span class="string">&#x27;exec mysqldump --all-databases&#x27;</span> &gt; /backupdata/mysql/all-databases.sql</span><br><span class="line"></span><br><span class="line">3.从备份数据恢复</span><br><span class="line">docker <span class="built_in">exec</span> -i mysql sh -c <span class="string">&#x27;exec mysql -uroot -pmysql123zxcpD6Q&#x27;</span> &lt; /backupdata/mysql/all-databases.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">### Shell备份脚本</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 设置mysql的登录用户名和密码(根据实际情况填写)</span></span><br><span class="line">mysql_user=<span class="string">&quot;root&quot;</span></span><br><span class="line">mysql_password=<span class="string">&quot;mysql123zxcpD6Q&quot;</span></span><br><span class="line">mysql_host=<span class="string">&quot;localhost&quot;</span></span><br><span class="line">mysql_port=<span class="string">&quot;3306&quot;</span></span><br><span class="line">mysql_charset=<span class="string">&quot;utf8mb4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份文件存放地址(根据实际情况填写)</span></span><br><span class="line">backup_location=/backupdata/mysql/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否删除过期数据</span></span><br><span class="line">expire_backup_delete=<span class="string">&quot;ON&quot;</span></span><br><span class="line">expire_days=7</span><br><span class="line">backup_time=`<span class="built_in">date</span> +%Y%m%d_%H%M`</span><br><span class="line">backup_dir=<span class="variable">$backup_location</span></span><br><span class="line">welcome_msg=<span class="string">&quot;Welcome to use MySQL backup tools!&quot;</span></span><br><span class="line"><span class="comment"># 备份指定数据库中数据(此处假设数据库是mysql_backup_test)</span></span><br><span class="line"><span class="comment">#docker exec -it mysql mysqldump -h$mysql_host -P$mysql_port -u$mysql_user -p$mysql_password -B test1 &gt; $backup_dir/mysql_backup_$backup_time.sql</span></span><br><span class="line">docker <span class="built_in">exec</span> mysql sh -c <span class="string">&#x27;exec mysqldump --all-databases -uroot -pmysql123zxcpD6Q&#x27;</span> &gt;  /backupdata/mysql/all-databases.sql</span><br><span class="line"><span class="comment"># 删除过期数据</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$expire_backup_delete</span>&quot;</span> == <span class="string">&quot;ON&quot;</span> -a  <span class="string">&quot;<span class="variable">$backup_location</span>&quot;</span> != <span class="string">&quot;&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        `find <span class="variable">$backup_location</span>/ -<span class="built_in">type</span> f -mtime +<span class="variable">$expire_days</span> | xargs <span class="built_in">rm</span> -rf`</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Expired backup data delete complete!&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装工单系统&quot;&gt;&lt;a href=&quot;#安装工单系统&quot; class=&quot;headerlink&quot; title=&quot;安装工单系统&quot;&gt;&lt;/a&gt;安装工单系统&lt;/h1&gt;&lt;p&gt;开源系统参考：&lt;a href=&quot;https://www.fdevops.com/docs/ferry-tut</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo博客的搭建</title>
    <link href="http://example.com/2022/08/08/hexo/"/>
    <id>http://example.com/2022/08/08/hexo/</id>
    <published>2022-08-08T08:30:28.000Z</published>
    <updated>2022-08-18T08:34:13.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo搭建个人博客"><a href="#Hexo搭建个人博客" class="headerlink" title="Hexo搭建个人博客"></a>Hexo搭建个人博客</h2><h4 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h4><p>工具：hexo、git、Node.js、npm&#x2F;cnpm</p><p>平台：Linux、macOS、Windows等</p><p>mac 下搭建<a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a>主要需要用到以下几个组件（一定要注意大版本，不同版本可能不兼容的）</p><ol><li>homebrew 用于快速安装以下几个组件</li><li>git 无具体版本要求</li><li>node 14.x版本</li><li>hexo 5.x版本</li></ol><p>homebrew的话相信用mac的都已经装过了，至于git相信我们做服务端的也都安装了。<br>brew install node 就可以安装node了，当然你看到这篇文章的话，可能默认版本已经不是14.x了，所以要经过以下几步安装指定版本的node</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 搜索现有node版本</span></span><br><span class="line">brew search node</span><br><span class="line"><span class="comment">## 安装指定版本</span></span><br><span class="line">brew install node@x</span><br><span class="line"><span class="comment">## 安装git</span></span><br><span class="line">brew install git</span><br></pre></td></tr></table></figure><p>node版本冲突的问题很严重，如果你之前已经安装了不同版本的node，为了不影响你其他服务的运行，建议手动安装14.x的node。</p><p>node安装好以后，要使用node安装hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## -g在全局进行安装</span></span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>然后要先用hexo创建出一个博客模板工程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 后面的路径就是你的博客路径 目录会自动创建的</span></span><br><span class="line">hexo init /Users/cengrong/Desktop/HexoBlog/blog</span><br></pre></td></tr></table></figure><p>博客初始化好以后，自带了node的一些默认配置，但是有可能版本会有冲突，所以这里我直接给出了我目前hexo所需要的所有依赖和指定版本，将以下内容写入package.json文件（类似于我们服务端的pom文件，用于给node进行包管理）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;5.4.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;add&quot;</span>: <span class="string">&quot;^2.0.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^2.1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-jade&quot;</span>: <span class="string">&quot;^0.4.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-pug&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^1.1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-server&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;or&quot;</span>: <span class="string">&quot;^0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yarn&quot;</span>: <span class="string">&quot;^1.22.10&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/lvqiushi/soft/hexo-test</span><br><span class="line"><span class="comment">## 安装指定版本的包依赖</span></span><br><span class="line">npm install --save</span><br></pre></td></tr></table></figure><p>至此为止，前置环境依赖就差不多了（也是最难的一步，后面写博客很简单的）<br>试运行以下命令，查看博客能否正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 生成博客工程</span></span><br><span class="line">hexo clean &amp;&amp; hexo g</span><br><span class="line"><span class="comment">## 启动本地服务</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>启动服务以后，命令行会输出本地地址，默认地址<a href="http://localhost:4000，访问就能看到本地的博客了。">http://localhost:4000，访问就能看到本地的博客了。</a></p><p>GitHub上创建项目</p><p>注意：前面的名字要和后面的一样</p><p>没问题之后部署到Github上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hexo搭建个人博客&quot;&gt;&lt;a href=&quot;#Hexo搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo搭建个人博客&quot;&gt;&lt;/a&gt;Hexo搭建个人博客&lt;/h2&gt;&lt;h4 id=&quot;1-环境准备&quot;&gt;&lt;a href=&quot;#1-环境准备&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>个人命令总结</title>
    <link href="http://example.com/2022/08/08/zongjie/"/>
    <id>http://example.com/2022/08/08/zongjie/</id>
    <published>2022-08-08T08:30:28.000Z</published>
    <updated>2022-08-18T08:34:24.446Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;1i\添加的内容&#x27;</span> file <span class="comment">#这是在第一行前添加字符串 </span></span><br><span class="line">sed -i <span class="string">&#x27;$i\添加的内容&#x27;</span> file <span class="comment">#这是在最后一行行前添加字符串 </span></span><br><span class="line">sed -i <span class="string">&#x27;$a\添加的内容&#x27;</span> file <span class="comment">#这是在最后一行行后添加字符串</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;sed&quot;&gt;&lt;a href=&quot;#sed&quot; class=&quot;headerlink&quot; title=&quot;sed&quot;&gt;&lt;/a&gt;sed&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>filecoin运维文档</title>
    <link href="http://example.com/2022/07/29/filecoin-%E6%96%B0/"/>
    <id>http://example.com/2022/07/29/filecoin-%E6%96%B0/</id>
    <published>2022-07-29T04:27:29.000Z</published>
    <updated>2022-07-29T10:24:53.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="filecoin运维文档"><a href="#filecoin运维文档" class="headerlink" title="filecoin运维文档"></a>filecoin运维文档</h1><h2 id="一、filecoin四个阶段概述"><a href="#一、filecoin四个阶段概述" class="headerlink" title="一、filecoin四个阶段概述"></a>一、filecoin四个阶段概述</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P1：precommit1  加密并分隔原始数据封装为11个layer文件(32G或者64G)，确保数据安全及隐私</span><br><span class="line">P2：precommit2 读取生成的11个文件，并推算出一个结果文件，为检索数据做准备</span><br><span class="line">C1：commit1 校验P2生成的结果文件，为C2提交复制证明准备运算数据</span><br><span class="line">C2：commit2 提交复制证明，用于证实矿工确实对客户的订单数据进行了存储，并为提交时空证明做准备。</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/1715211/110258389-570e7f80-7fdd-11eb-9654-2c0e6dfa9ba2.png" alt="img"></p><p>进程介绍：</p><p>​miner：lotus和lotus-miner</p><p>​P1：目前为64G异构方案，14个p1进程，一个apx进程，以及一个p2进程</p><p>​C2：4个c2进程</p><p>​配比：一台C2配9台P1</p><h2 id="二、常用的filecoin操作"><a href="#二、常用的filecoin操作" class="headerlink" title="二、常用的filecoin操作"></a>二、常用的filecoin操作</h2><h4 id="2-1、lotus"><a href="#2-1、lotus" class="headerlink" title="2.1、lotus"></a>2.1、lotus</h4><ul><li>查看lotus的进程是否正常</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pgrep lotus -a</span><br></pre></td></tr></table></figure><ul><li>停止进程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus daemon stop</span><br></pre></td></tr></table></figure><ul><li>查看本节点所监听的地址</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus net listen</span><br></pre></td></tr></table></figure><ul><li>查看连接的节点列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus net peers</span><br></pre></td></tr></table></figure><ul><li>手动连接其他节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus net connect &lt;PEER_ADDR&gt;</span><br></pre></td></tr></table></figure><ul><li>查看lotus的高度是否是done</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus <span class="built_in">sync</span> <span class="built_in">wait</span></span><br></pre></td></tr></table></figure><ul><li>查看lotus的运行日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /opt/raid0/lotus/logs</span><br></pre></td></tr></table></figure><ul><li>列出等待上链消息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus mpool pending --<span class="built_in">local</span></span><br></pre></td></tr></table></figure><ul><li>上链脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;开始执行上链&quot;</span></span><br><span class="line">time_date=`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M.%S&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前时间 <span class="variable">$time_date</span>&quot;</span></span><br><span class="line"><span class="built_in">source</span>  /opt/raid0/profile</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `/usr/local/bin/lotus mpool pending --<span class="built_in">local</span> --cids`; <span class="keyword">do</span> /usr/local/bin/lotus  mpool replace --auto --gas-feecap 25000000000 --gas-premium 3708563 --gas-limit 59490216 <span class="variable">$i</span> &amp;&amp; sleep1;<span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;上链ok·&quot;</span></span><br></pre></td></tr></table></figure><ul><li>导出快照</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus chain <span class="built_in">export</span> --skip-old-msgs --recent-stateroots=900 chain.car</span><br></pre></td></tr></table></figure><ul><li>导入快照</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus daemon --import-snapshot chain.car</span><br></pre></td></tr></table></figure><h4 id="2-2、lotus-miner"><a href="#2-2、lotus-miner" class="headerlink" title="2.2、lotus-miner"></a>2.2、lotus-miner</h4><ul><li>查看矿工当前信息，包括算算力，密封情况</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner info</span><br></pre></td></tr></table></figure><ul><li>查看miner的进程是否正常</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pgrep lotus -a</span><br></pre></td></tr></table></figure><ul><li>查看miner的运行日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /opt/raid0/lotusminer/logs</span><br></pre></td></tr></table></figure><ul><li>查看任务数jobs，并以主机名统计排列</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sealing  <span class="built_in">jobs</span>|awk <span class="string">&#x27;NR&gt;1&#123;host[$4&quot;:&quot;$5]+=1&#125;END&#123;for(i in host)print i,host[i]&#125;&#x27;</span>|<span class="built_in">sort</span> -nk2 |column -t</span><br></pre></td></tr></table></figure><ul><li>放弃某个job</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sealing abort &lt;callid&gt;</span><br></pre></td></tr></table></figure><ul><li>批量放弃失联job</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sealing <span class="built_in">jobs</span> |awk <span class="string">&#x27;/ret-wait/&#123;print &quot;lotus-miner sealing abort&quot;,$1,&quot;&amp;&amp; lotus-miner sectors update-state --really-do-it  &quot;$2&quot;  Removed&quot;&#125;&#x27;</span>| bash</span><br></pre></td></tr></table></figure><ul><li>导出调度队列</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sealing sched-diag</span><br></pre></td></tr></table></figure><ul><li>暂停给worker派发新任务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner worker-pause -tt &lt;ap|p1|p2|c1|c2|fin|all&gt; --uuid &lt;uuid&gt;</span><br></pre></td></tr></table></figure><ul><li>恢复给worker派发新任务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner worker-resume --uuid &lt;uuid&gt; --tt all</span><br></pre></td></tr></table></figure><ul><li>暂停给所有worker派发新任务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner worker-pause --uuid all --tt all</span><br></pre></td></tr></table></figure><ul><li>暂停给某个worker停掉所有任务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sealing workers | grep f01215328-p1-192-168-51-133 | awk -F<span class="string">&#x27;[, ]+&#x27;</span> <span class="string">&#x27;&#123;print &quot;lotus-miner worker-pause --tt all --uuid&quot;,$2&#125;&#x27;</span>| bash</span><br></pre></td></tr></table></figure><ul><li>查看worker数量，并以主机名统计排列</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sealing workers|awk <span class="string">&#x27;NR&gt;1&#123;host[$4&quot;:&quot;$5]+=1&#125;END&#123;for(i in host)print i,host[i]&#125;&#x27;</span>|<span class="built_in">sort</span>|column -t</span><br></pre></td></tr></table></figure><ul><li>清除所有的worker</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sealing workers  | grep -w 矿工号  | awk -F <span class="string">&#x27;[, ]&#x27;</span> <span class="string">&#x27;&#123;print &quot;lotus-miner worker-remove --uuid&quot;,$2&#125;&#x27;</span> | bash</span><br></pre></td></tr></table></figure><ul><li>删除disabled或者是pause的worker</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sealing workers  | egrep  <span class="string">&quot;disable|pause&quot;</span>  | awk -F <span class="string">&#x27;[, ]&#x27;</span> <span class="string">&#x27;&#123;print &quot;lotus-miner worker-remove --uuid&quot;,$2&#125;&#x27;</span> | bash</span><br></pre></td></tr></table></figure><h4 id="2-3、扇区"><a href="#2-3、扇区" class="headerlink" title="2.3、扇区"></a>2.3、扇区</h4><ul><li>列出所有扇区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sectors list --fast</span><br></pre></td></tr></table></figure><ul><li>创建扇区封装任务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sectors pledge</span><br></pre></td></tr></table></figure><ul><li>查看某个扇区的日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sectors status --<span class="built_in">log</span>  &lt;sector_id&gt;</span><br></pre></td></tr></table></figure><ul><li>终止链上的扇区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sectors terminate --really-do-it &lt;sector_id&gt;</span><br></pre></td></tr></table></figure><ul><li>快速列举某个状态类型扇区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sectors list --fast --states &lt;sector_status&gt;</span><br></pre></td></tr></table></figure><ul><li>处理异常扇区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PreCommitFailed: lotus-miner sectors remove --really-do-it &lt;sectorId&gt;</span><br><span class="line">SealPreCommit1Failed: lotus-miner sectors remove --really-do-it &lt;sectorId&gt;</span><br><span class="line">CommitFailed: lotus-miner sectors update-state --really-do-it &lt;sectorId&gt; Committing</span><br></pre></td></tr></table></figure><ul><li>批量remove错误扇区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -100 /opt/raid0/lotusminer/logs| egrep <span class="string">&quot;(SealPreCommit2Failed|SealPreCommit1Failed|CommitFailed|CommitFinalizeFailed)&quot;</span>  |awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> | grep <span class="string">&#x27;,&#x27;</span> | egrep <span class="string">&#x27;[0-9]&#123;3,6&#125;&#x27;</span>  -o  |awk <span class="string">&#x27;&#123;print &quot;lotus-miner sectors update-state --really-do-it &quot; $1 &quot; Removed&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>放弃任务和移除扇区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sealing <span class="built_in">jobs</span> | grep  -w   f0469055-c2-192-168-33-46 | awk <span class="string">&#x27;&#123;print &quot;lotus-miner sealing  abort &quot; $1&quot; &amp;&amp; lotus-miner sectors update-state --really-do-it &quot;$2&quot; Removed&quot; &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">lotus-miner sealing <span class="built_in">jobs</span> | awk <span class="string">&#x27;NR&gt;1&#123;print &quot;lotus-miner sealing abort&quot;,$1,&quot;&amp;&amp; lotus-miner sectors update-state --really-do-it &quot;$2&quot; Removed&quot;&#125;&#x27;</span> | bash</span><br></pre></td></tr></table></figure><h4 id="2-4、存储"><a href="#2-4、存储" class="headerlink" title="2.4、存储"></a>2.4、存储</h4><ul><li>增加&#x2F;更新存储路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner storage attach /path/to/persistent_storage</span><br></pre></td></tr></table></figure><ul><li>查询扇区存储路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner storage find &lt;sector_id&gt;</span><br></pre></td></tr></table></figure><ul><li><p>初始化存储目录</p><blockquote><p>这里的存储目录一定是共享存储，worker上完成封装的扇区最后会写入共享存储，所以worker(P1机器)也需要进行挂载，且必须同样的挂载路径，worker并不知道本地有这个路径，由miner告诉worker往哪里存。</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/raid0/profile</span><br><span class="line">lotus-miner storage attach --store --init 挂载路径</span><br></pre></td></tr></table></figure><h4 id="2-6、钱包管理"><a href="#2-6、钱包管理" class="headerlink" title="2.6、钱包管理"></a>2.6、钱包管理</h4><ul><li>查看钱包列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus wallet list </span><br></pre></td></tr></table></figure><ul><li>创建一个BLS钱包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus wallet new bls</span><br></pre></td></tr></table></figure><ul><li>查看钱包余额</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus wallet balance</span><br></pre></td></tr></table></figure><ul><li>导出钱包私钥到文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus wallet <span class="built_in">export</span> wallet  &gt;file</span><br></pre></td></tr></table></figure><ul><li>提币(转到owner钱包)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner actor withdraw [amount (FIL)]</span><br></pre></td></tr></table></figure><ul><li>列出miner使用的钱包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner actor control list --verbose</span><br></pre></td></tr></table></figure><ul><li>转币</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus send --from  owner钱包地址   对方钱包地址   币数量</span><br></pre></td></tr></table></figure><ul><li>导出私钥</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus wallet <span class="built_in">export</span>  钱包地址</span><br></pre></td></tr></table></figure><h4 id="2-5、数据备份和恢复"><a href="#2-5、数据备份和恢复" class="headerlink" title="2.5、数据备份和恢复"></a>2.5、数据备份和恢复</h4><ul><li>备份元数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner backup /opt/raid0/minerbackup/xxx.cbor</span><br></pre></td></tr></table></figure><ul><li>离线备份元数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner backup --offline /opt/raid0/minerbackup/xxx.cbor</span><br></pre></td></tr></table></figure><ul><li>通过元数据恢复</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner init restore /opt/raid0/minerbackup/xxx.cbor</span><br></pre></td></tr></table></figure><h4 id="2-6、显卡驱动"><a href="#2-6、显卡驱动" class="headerlink" title="2.6、显卡驱动"></a>2.6、显卡驱动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1、卸载系统里的Nvidia低版本显卡驱动</span><br><span class="line">sudo apt-get purge *nvidia*</span><br><span class="line">sudo apt-get --purge remove <span class="string">&quot;*nvidia*&quot;</span></span><br><span class="line">sudo apt autoremove</span><br><span class="line"></span><br><span class="line">2、把显卡驱动加入PPA</span><br><span class="line">sudo add-apt-repository ppa:graphics-drivers</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">3、查找显卡驱动最新的版本号</span><br><span class="line">sudo apt-cache search nvidia</span><br><span class="line"></span><br><span class="line">4、使用终端命令查看Ubuntu推荐的驱动版本</span><br><span class="line">sudo ubuntu-drivers devices</span><br><span class="line"> </span><br><span class="line">5、安装Nvidia驱动，假设我们想装460的版本</span><br><span class="line">sudo apt-get install nvidia-driver-460</span><br><span class="line"></span><br><span class="line">6、重启</span><br><span class="line">sudo reboot</span><br><span class="line"></span><br><span class="line">7、验证驱动是否安装成功</span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h4 id="2-7、硬盘调优"><a href="#2-7、硬盘调优" class="headerlink" title="2.7、硬盘调优"></a>2.7、硬盘调优</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、查看现有硬盘参数，如果显示128为正常，否则需要修改</span><br><span class="line"><span class="built_in">cat</span> /sys/block/nvme*n1/queue/max_sectors_kb</span><br><span class="line"></span><br><span class="line">2、优化如下</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/udev/rules.d/71-block-max-sectors.rules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">ACTION==&quot;add&quot;, SUBSYSTEM==&quot;block&quot;, RUN+=&quot;/bin/sh -c &#x27;/bin/echo 128 &gt; /sys%p/queue/max_sectors_kb&#x27;&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">3、重启服务器生效</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h4 id="2-8、cpu开启性能模式"><a href="#2-8、cpu开启性能模式" class="headerlink" title="2.8、cpu开启性能模式"></a>2.8、cpu开启性能模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装cpufrequtils</span></span><br><span class="line">sudo apt-get install cpufrequtils -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#把cpu调整到性能模式</span></span><br><span class="line">sudo cpufreq-selector -g performance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装sysfsutils</span></span><br><span class="line">sudo apt-get install sysfsutils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自动性能模式</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysfs.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">devices/system/cpu/cpu0/cpufreq/scaling_governor = performance</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="2-9、西数硬盘升级固件"><a href="#2-9、西数硬盘升级固件" class="headerlink" title="2.9、西数硬盘升级固件"></a>2.9、西数硬盘升级固件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">1、下载固件包</span><br><span class="line">wget --user=za --password=za@2021 http://download.zhianidc.com/application/westdata/SN640_FW_R1110021.zip -P /tmp/</span><br><span class="line"></span><br><span class="line">2、解压并做软连接</span><br><span class="line">unzip /tmp/SN640_FW_R1110021.zip /tmp/</span><br><span class="line">unzip /tmp/SN640_FW_R1110021/dm-2.3-Linux-tar-gz.zip -d /tmp/</span><br><span class="line">tar xf /tmp/dm-2.3.1-Linux.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/dm-2.3.1-Linux/bin/dm-cli /usr/local/bin/dm-cli</span><br><span class="line"></span><br><span class="line">3、处理无法读写的ssd，需要格式化，更新固件不会破坏SSD原有数据，不需要断电。但是SSD读写必须停止</span><br><span class="line"><span class="comment"># 扫描现有硬盘配置 </span></span><br><span class="line">dm-cli scan </span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化擦除ssd</span></span><br><span class="line">dm-cli format -p /dev/nvme0</span><br><span class="line">dm-cli format -p /dev/nvme1</span><br><span class="line">dm-cli format -p /dev/nvme2</span><br><span class="line">dm-cli format -p /dev/nvme3</span><br><span class="line"></span><br><span class="line">4、查看当前固件版本</span><br><span class="line">dm-cli manage-firmware --list --path /dev/nvme0 --output-format mini</span><br><span class="line"></span><br><span class="line">5、升级固件</span><br><span class="line"><span class="comment"># 都为succeeded则为成功</span></span><br><span class="line">dm-cli manage-firmware --load --file /tmp/SN640_FW_R1110021/aspenplus_GN_R1110021.vpkg --slot 2 --path /dev/nvme0</span><br><span class="line">dm-cli manage-firmware --load --file /tmp/SN640_FW_R1110021/aspenplus_GN_R1110021.vpkg --slot 2 --path /dev/nvme1</span><br><span class="line">dm-cli manage-firmware --load --file /tmp/SN640_FW_R1110021/aspenplus_GN_R1110021.vpkg --slot 2 --path /dev/nvme2</span><br><span class="line">dm-cli manage-firmware --load --file /tmp/SN640_FW_R1110021/aspenplus_GN_R1110021.vpkg --slot 2 --path /dev/nvme3</span><br><span class="line"></span><br><span class="line">6、激活硬盘</span><br><span class="line">dm-cli manage-firmware --activate --slot 2 --path /dev/nvme0</span><br><span class="line">dm-cli manage-firmware --activate --slot 2 --path /dev/nvme1</span><br><span class="line">dm-cli manage-firmware --activate --slot 2 --path /dev/nvme2</span><br><span class="line">dm-cli manage-firmware --activate --slot 2 --path /dev/nvme3</span><br><span class="line"></span><br><span class="line">7、如果没有报错，重启生效</span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line">8、查看是否都升级成功</span><br><span class="line">nvme list 或者 dm-cli manage-firmware --list --path /dev/nvme0 --output-format mini</span><br></pre></td></tr></table></figure><h2 id="三、算力封装"><a href="#三、算力封装" class="headerlink" title="三、算力封装"></a>三、算力封装</h2><h4 id="3-1、全新算力P1封装"><a href="#3-1、全新算力P1封装" class="headerlink" title="3.1、全新算力P1封装"></a>3.1、全新算力P1封装</h4><ul><li>迁移步骤迁移算力机标准流程分两个大步骤<br>一：老的集群。<br>1.1 停监控告警<br>1.2 确认是否落盘或者在落盘或者C2<br>1.3 清理miner上的jobs任务<br>1.4 在worker上pkill要迁移机器的进程<br>1.5 在miner上将要迁移的worker机器的uuid，移除<br>二：要加去的集群<br>2.1 删除机器的&#x2F;opt&#x2F;raid0&#x2F;workercache目录<br>2.2 在worker-apx目录下除了start_apx.sh和init_apx.sh两个脚本，全部删除<br>2.2 修改需要迁移worker机器的主机名<br>2.3 更新&#x2F;opt&#x2F;lotusworker&#x2F;profile文件<br>2.4 确认程序版本，模板参数，证明参数(同构需要)<br>2.5 启动所有worker-p1的，确认ok，启动apx并init<br>2.6 umount现有存储，重新挂载新存储，修改&#x2F;etc&#x2F;fstab<br>2.7 启动P2或者C2，并确认ok<br>2.8 miner上下发任务，并开启定时任务封装脚本<br>2.9 启动监控告警fcmonit<br>3.0 修改ansible清单，jumpserver等</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">filnum=f88888</span><br><span class="line"></span><br><span class="line">1、检查是否有做软raid0</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m shell -a <span class="string">&quot;df -h /opt/raid0&quot;</span></span><br><span class="line"></span><br><span class="line">2、如果没有做，我们需要手动制作raid0</span><br><span class="line">mdadm -Cv /dev/md0 -a <span class="built_in">yes</span> -n 磁盘数量 -l RAID级别 数据盘1 数据盘2 ....</span><br><span class="line">mdadm -Cv /dev/md0 -a <span class="built_in">yes</span> -n 4 -l 0 /dev/nvme0n1 /dev/nvme1n1 /dev/nvme2n1 /dev/nvme3n1 </span><br><span class="line">mdadm -D --scan &gt;/etc/mdadm.conf</span><br><span class="line">mkfs.xfs -f /dev/md0</span><br><span class="line"><span class="built_in">ls</span> -l /dev/disk/by-uuid/|awk <span class="string">&#x27;/md0/&#123;print &quot;echo \&quot;/dev/disk/by-uuid/&quot;$9&quot; /opt/raid0 xfs defaults 0 0\&quot; &gt;&gt;/etc/fstab&quot;&#125;&#x27;</span>|bash </span><br><span class="line"><span class="built_in">mkdir</span> /opt/raid0 -p</span><br><span class="line">mount -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认挂载正确</span></span><br><span class="line"><span class="built_in">df</span> -h /opt/raid0</span><br><span class="line"></span><br><span class="line">3、拷贝数据模板，并确认文件数量和大小完整/opt/raid0/&#123;filecoin-parents,merklecache,piecetemplate&#125;</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m raw -a <span class="string">&#x27;tree -h /opt/raid0/&#123;filecoin-parents,merklecache,piecetemplate&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">4、执行部署安装playbook脚本</span><br><span class="line">ansible-playbook -e host=<span class="variable">$filnum</span> /etc/ansible/filecoin/deploy_worker_p1.yaml</span><br><span class="line"></span><br><span class="line">5、首次部署结束后需要进行重启woerker, 使其hugepage配置生效</span><br><span class="line">ansible <span class="variable">$filnum</span> -m reboot</span><br><span class="line"></span><br><span class="line">6、重启之后检查hugepage分配是否正确</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m shell -a <span class="string">&quot;cat /sys/devices/system/node/node*/hugepages/hugepages-1048576kB/nr_hugepages&quot;</span></span><br><span class="line"></span><br><span class="line">7、重启之后检查显卡驱动是否正常</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m shell -oa <span class="string">&quot;nvidia-smi -L&quot;</span></span><br></pre></td></tr></table></figure><ul><li>挂载nfs<ul><li>如果是新的nfs集群加入，需要miner和p1时部署nfs客户端</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nfs-common -y</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>挂载ceph</p><ul><li>如果是新的ceph集群加入，需要</li></ul></li></ul><h4 id="3-2、迁移算力机"><a href="#3-2、迁移算力机" class="headerlink" title="3.2、迁移算力机"></a>3.2、迁移算力机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">filnum=f01227383</span><br><span class="line"></span><br><span class="line">1、在旧miner上确认是否还在封装</span><br><span class="line"></span><br><span class="line">2、停掉监控fcmonit</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m shell -a <span class="string">&quot;systemctl stop fcmonit&quot;</span></span><br><span class="line"></span><br><span class="line">3、查看旧的lotus-worker进程，并关闭进程</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m  shell  -a  <span class="string">&quot;pkill lotus&quot;</span></span><br><span class="line"></span><br><span class="line">4、检查是否关闭交换分区，如果关闭了就跳过</span><br><span class="line">ansible-playbook  -e host=<span class="variable">$filnum</span>-p1  /etc/ansible/filecoin/disable_swap.yml</span><br><span class="line"></span><br><span class="line">5、检查超线程</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m  shell  -a  <span class="string">&quot;lscpu|grep &#x27;Thread(s) per core&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line">6、修改主机名</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m  shell  -a  <span class="string">&quot; sed -i   &#x27;s/f01021773/f0469055/g&#x27;  /etc/hostname&quot;</span></span><br><span class="line"></span><br><span class="line">7、清理旧数据</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m  raw  -a  <span class="string">&quot;rm -rf /opt/raid0/workercache/cache/* &amp;&amp; rm -rf /opt/raid0/workercache/sealed/* &amp;&amp; rm -rf /opt/raid0/workercache/unsealed/*&quot;</span></span><br><span class="line"></span><br><span class="line">8、删除旧集群的p1的profile文件</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m  raw  -a  <span class="string">&quot;rm -f /opt/lotusworker/profile&quot;</span></span><br><span class="line"></span><br><span class="line">9、在ansible临时目录下创建profile文件，并发到所有的p1机上</span><br><span class="line">1、miner上获取api信息</span><br><span class="line"><span class="built_in">paste</span> -d <span class="string">&#x27;:&#x27;</span> /opt/raid0/lotusminer/token /opt/raid0/lotusminer/api</span><br><span class="line">2、将获取到的信息填写到ansible的/tmp目录下</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export MINER_API_INFO=&quot;上面获取的token连接信息&quot;&#x27;</span> &gt; /tmp/profile-<span class="variable">$filnum</span></span><br><span class="line">3、批量传到所有的p1上</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m copy -a <span class="string">&quot;src=/tmp/profile-<span class="variable">$filnum</span> dest=/opt/lotusworker/profile&quot;</span></span><br><span class="line"></span><br><span class="line">10、卸载老的nfs或者是ceph挂载点</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m shell -a <span class="string">&quot;df -h&quot;</span></span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m shell -a <span class="string">&quot;umount 挂载的ceph或者nfs路径&quot;</span></span><br><span class="line"></span><br><span class="line">11、更新fstab文件</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m lineinfile  -a <span class="string">&#x27;path=/etc/fstab regexp=&quot;ceph|nfs&quot; state=absent&#x27;</span></span><br><span class="line"></span><br><span class="line">12、确认下/etc/fstab是否删除</span><br><span class="line">ansible <span class="variable">$filnum</span>-p1 -m shell -a <span class="string">&quot;cat /etc/fstab&quot;</span></span><br><span class="line"></span><br><span class="line">13、将新的存储挂载信息追加到/etc/fstab</span><br><span class="line">1、如果是nfs，根据miner上实际的挂载批量导入到/etc/fstab,可以在ansible   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、错误排查"><a href="#四、错误排查" class="headerlink" title="四、错误排查"></a>四、错误排查</h2><h4 id="4-1、扇区任务排查"><a href="#4-1、扇区任务排查" class="headerlink" title="4.1、扇区任务排查"></a>4.1、扇区任务排查</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一、lotus-miner info发现CommitFinalizeFailed</span><br><span class="line"></span><br><span class="line">处理步骤如下：</span><br><span class="line">1、查出错误扇区<span class="built_in">id</span></span><br><span class="line">lotus-miner sectors list --states CommitFinalizeFailed</span><br><span class="line"></span><br><span class="line">2、查看详细报错</span><br><span class="line">lotus-miner sectors status --<span class="built_in">log</span> 扇区<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">3、定位报错在哪一台worker</span><br><span class="line">lotus-miner sectors status 扇区<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">4、登录对应的worker机，查看apx的日志，发现是raid0故障，重新挂载raid0后恢复</span><br><span class="line"><span class="built_in">tail</span> -f /opt/lotusworker/worker-apx/log.txt</span><br></pre></td></tr></table></figure><h4 id="4-2、token报错"><a href="#4-2、token报错" class="headerlink" title="4.2、token报错"></a>4.2、token报错</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一、JWT Verification failed，如果worker机上有类似错误，不断的返回连接旧的miner的报错IP</span><br><span class="line"></span><br><span class="line">处理步骤如下：</span><br><span class="line">1、登录miner机上，停掉所有该worker机的<span class="built_in">jobs</span>，并且移除所有worker进程</span><br><span class="line">lotus-miner sealing workers  | egrep  <span class="string">&quot;disable|pause&quot;</span>  | awk -F <span class="string">&#x27;[, ]&#x27;</span> <span class="string">&#x27;&#123;print &quot;lotus-miner worker-remove --uuid&quot;,$2&#125;&#x27;</span> | bash</span><br><span class="line"></span><br><span class="line">2、再次在worker上检查是否还有JWT Verification类似的错误</span><br></pre></td></tr></table></figure><h4 id="4-3、抽查常见错误处理"><a href="#4-3、抽查常见错误处理" class="headerlink" title="4.3、抽查常见错误处理"></a>4.3、抽查常见错误处理</h4><ul><li>抽查常见的问题类别</li></ul><blockquote><ol><li>从存储加载文件耗时太长、或者挂死</li><li>显卡证明过程中出错、奔溃</li><li>网络问题导致往主网提交证明失败</li></ol></blockquote><ul><li>问题原因排查步骤</li></ul><blockquote><ol><li><p><strong>检查抽查日志是否有错误</strong><br><code>grep -i &#39;panic\|error\|failed&#39;</code>，如果有错误，则先耐心读懂错误内容，实在无法理解的错误请咨询程序提供方。</p></li><li><p><strong>检查关注的窗口的抽查情况</strong><br>例如，当前关注的是索引为8的窗口，那么，我们 <code>grep -i &#39;&quot;index&quot;:8&#39;</code>，根据grep到的结果不同，便有不同的结论。</p><p>如果没有看到对应该索引的<code>running window post</code>日志，则说明这个窗口还没有开始，没有开始的原因可能是抽查时间没到，又或者miner进程已经卡死导致无法正常开始这个窗口的抽查过程。</p><p>如果看到了<code>running window post</code>，说明抽查已经开始了，如果没有看到<code>computing window post</code>则说明这个窗口开始了但还没有结束，没有结束的原因可能是存储太慢或者显卡证明太慢。如果看到了<code>computing window post</code>说明计算已经结束，此时看看计算时间是否超时（例如，超过了30分钟），如果超时了那么肯定就抽查失败了。</p><p>对于没有看到<code>computing window post</code>，肯定的是该窗口的计算还没有结束，那么我们可以看看当前的时间，减去<code>running window post</code>日志的时间，就知道这个计算过程已经耗时了多久了。如果超过预期，那么我们应该仔细查看日志，看看卡在了哪一个<a href="#%E6%8A%BD%E6%9F%A5%E8%BF%87%E7%A8%8B%E9%98%B6%E6%AE%B5">阶段</a>，例如是卡在显卡证明阶段？还是卡在读取存储阶段？</p><p>如果一切看起来都正常，那么此时就要考虑是否网络阻塞了，导致无法提交抽查结果。</p></li></ol></blockquote><ul><li>抽查重合的处理</li></ul><blockquote><p>所谓抽查重合，是指在某个窗口时间内，进行两个窗口抽查。这种情况在抽查超时的情况下，几乎必然发生。例如，当前时间段，应该进行第8个窗口的抽查，但是由于读取存储太慢（或者显卡证明太慢等等）导致第7个窗口还没有计算完毕，此时miner又开始第8个窗口的抽查计算。由于两个抽查同时进行着，那么只会慢上加慢，最后不管是第7，还是第8个，都会失败。甚至，第8个窗口在第9个窗口开始时都还没有结束，这就导致抽查一路重合下去，7，8，9，10……一路失败。</p><p>此时我们应该要立即重启miner，由于miner重启后，它比较了当前的时间，发现已经到了第8个抽查窗口，他就会开始第8个窗口抽查，而放弃了第7个窗口，进而就避免了抽查重复。</p><p>需要特别注意的是，重启抽查miner后，应该立即tail -f 他的log，确认它的行为是预期的，例如确认它开启的是第8个窗口的抽查，而不是第7个，因为如果重启的时机并不是在第8个窗口时间段内，而是第7个窗口的后期，那么miner会继续第7个窗口的抽查，此时我们唯有再次重启miner或者先停止miner等一小段时间，再启动miner以便彻底错开第7个窗口。</p></blockquote><ul><li>抽查过程阶段</li></ul><blockquote><p>一个抽查加载及计算分为5部分，分别为：</p><ol><li>加载所有扇区p_aux文件，通过<code>grep &#39;load p_aux files end&#39;</code>可以看到took时间。每个扇区的p_aux文件大小是64字节。</li><li>加载所有扇区merkle tree root，通过<code>grep &#39;load merkle tree root: end&#39;</code>可以看到took时间，每个扇区tree root大小是32字节。</li><li>加载所有扇区merkle tree branch，通过<code>grep &#39;vanilla_proofs:finish windowPOST&#39;</code>可以看到took时间。对于每个扇区，这个过程是需要反复多次读取sealed文件及每一层tree-r-last-*.dat文件的，每个扇区读取的总量大约是几十KB。</li><li>显卡证明，通过<code>grep &#39;snark_proof:finish: windowPOST&#39;</code>可以看到took时间</li><li>关闭上述加载过程涉及到的文件句柄，通过比较<code>&#39;generate_window_post:drop tree files&#39;</code>和<code>&#39;generate_window_post:finish&#39;</code>两条日志之间的时间差获得该阶段耗时。有时候如果挂载点卡死，就会出现无法关闭文件（因为关闭文件需要挂载点及其文件系统响应）。</li></ol><p>步骤1~3是并行（具体并行数量取决于线程池线程数量配置，默认是CPU核数）读取存储的。窗口抽查除了加载及显卡计算时间，还有一些其他的时间开销，例如新封装的扇区发现等等，总的抽查耗时，以<code>computing window post</code>日志中的<code>elapsed</code>字段为准。</p></blockquote><ul><li>以抽查相关的环境变量</li></ul><blockquote><ol><li><p><strong>FIL_PROOFS_WINDOW_POST_GPU</strong></p><p>该变量设置抽查时使用的显卡UUID，如果想使用多个显卡，那么用逗号分割填写多个显卡的UUID。</p></li><li><p><strong>BELLMAN_SYNTHESIZE_BATCH</strong></p><p>该变量设置进行显卡证明时，并发进行电路综合处理的数量，一般设置为4即可。这个变量影响的是证明过程中使用的CPU核心数量，因为电路综合是通过CPU进行的。</p></li><li><p><strong>BELLMAN_CALC_BATCH</strong></p><p>该变量设置进行显卡证明时，并发进行显卡计算处理的数量，这个值越大计算越快，但是这个值是由显卡的显存决定的，因此如果设置过大就会导致显卡显存不足，计算失败。对于显存小于20GB的卡，设置为2较为合适；对于显存大于20GB的卡，设置为4较为合适。例如，2080TI我们设置为2；3090我们设置为4；有些显卡显存小于8GB，这种显卡是没法进行抽查证明计算的，例如3070。</p></li><li><p><strong>BELLMAN_CUSTOM_GPU</strong></p><p>这个变量作用是，在显卡驱动无法获取到显卡的CUDA核心数量时，显式地指定显卡的CUDA数量，这样miner进行显卡证明时就能够合理地设置并发参数。目前根据测试，驱动版本460以及之前的都可以提供显卡CUDA核心数量。但是470以及更新的就不能提供了，需要设置该参数。具体来说，如果日志中，出现<code>WARN bellperson::gpu::utils &gt; Number of CUDA cores for your device</code>，就表明需要通过该环境变量来设置CUDA核心数量了。某个显卡的CUDA核心数量，可以通过google得到。</p></li><li><p><strong>FIL_PROOFS_LOG_GEN_CACHED_PROOF</strong></p><p>这个变量的作用是，在加载merkle tree随机分支（这个阶段读取存储最多），把每个扇区的耗时打印出来。以便确定哪一个扇区较慢，通过找到该扇区所在的存储，进而可以到具体存储上排查原因。</p></li><li><p><strong>FIL_PROOFS_LOG_GEN_CACHED_PROOF_THRESHOLD</strong></p><p>这个变量的作用是设置FIL_PROOFS_LOG_GEN_CACHED_PROOF的工作阈值，单位是毫秒。默认是1000毫秒，也就是耗时大于等于1秒时才输出日志。</p></li></ol></blockquote><h2 id="五、如何正确删除扇区"><a href="#五、如何正确删除扇区" class="headerlink" title="五、如何正确删除扇区"></a>五、如何正确删除扇区</h2><ul><li>停任务的正确步骤是，先停apx，让机器把任务做完，等个7h，没有jobs后再把woker进程pkill  ，再remove掉所下机器的所有uuid</li><li>在你删除扇区之前请确保已经采取了必要的抢救措施，例如遇到存储故障，网络故障，调度故障等等，都要经过一系列的调试，故障诊断 ,最后再考虑删除扇区，谨慎删除扇区，别忘了，该命令有个选项–really-do-it</li></ul><h4 id="5-1、如何删除packing-PreCommitFailed和SealPreCommit1Failed状态的扇区？"><a href="#5-1、如何删除packing-PreCommitFailed和SealPreCommit1Failed状态的扇区？" class="headerlink" title="5.1、如何删除packing,PreCommitFailed和SealPreCommit1Failed状态的扇区？"></a>5.1、如何删除packing,PreCommitFailed和SealPreCommit1Failed状态的扇区？</h4><ul><li>这几种状态因为还没有质押，可通过下面的命令直接删除。所有precommit阶段完成之前的扇区，都可以通过此方法删除。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sectors remove --really-do-it &lt;sectorId&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2、如果删除状态为PreCommit1，PreCommit2，并且一直卡顿在这些状态的扇区？"><a href="#5-2、如果删除状态为PreCommit1，PreCommit2，并且一直卡顿在这些状态的扇区？" class="headerlink" title="5.2、如果删除状态为PreCommit1，PreCommit2，并且一直卡顿在这些状态的扇区？"></a>5.2、如果删除状态为PreCommit1，PreCommit2，并且一直卡顿在这些状态的扇区？</h4><ul><li><h5 id="首先应尝试如下命令删除"><a href="#首先应尝试如下命令删除" class="headerlink" title="首先应尝试如下命令删除"></a>首先应尝试如下命令删除</h5></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sealing abort &lt;JobId&gt;</span><br><span class="line">lotus-miner sectors remove &lt;SectorId&gt;</span><br></pre></td></tr></table></figure><h4 id="5-3、不建议删除commitfailed-finalizedfailed-以及所有完成precommit或者完成provcommit的扇区"><a href="#5-3、不建议删除commitfailed-finalizedfailed-以及所有完成precommit或者完成provcommit的扇区" class="headerlink" title="5.3、不建议删除commitfailed. finalizedfailed　以及所有完成precommit或者完成provcommit的扇区"></a>5.3、不建议删除commitfailed. finalizedfailed　以及所有完成precommit或者完成provcommit的扇区</h4><ul><li>建议把错误扇区恢复成出错之前的状态，重新做出错的这个步骤</li></ul><p>例：扇区commitfailed.此时precommit已经完成，重置扇区状态至commit1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sectors update-state --really-do-it &lt;sectorId&gt; Committing</span><br></pre></td></tr></table></figure><h4 id="5-4、如何删除因为存储故障，无法恢复的扇区"><a href="#5-4、如何删除因为存储故障，无法恢复的扇区" class="headerlink" title="5.4、如何删除因为存储故障，无法恢复的扇区"></a>5.4、如何删除因为存储故障，无法恢复的扇区</h4><ul><li><p>删除扇区一定要先链上删除再本地删除，这样能最大程度的减少损失，请记住执行顺序，这个相当重要</p></li><li><p>对于已经上链的扇区，如果数据丢失或者恢复失败(RecoveryTimeout)，需要用下面的命令在链上销毁掉。</p></li><li><p>一次可以批量销毁多个扇区，<strong>注意，链上销毁扇区会有惩罚，每销毁一个扇区大概要惩罚0.1个币</strong>。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sectors terminate --really-do-it &lt;sectorId-1&gt; &lt;sectorId-2&gt;...</span><br></pre></td></tr></table></figure><p>这一步的主要作用为清除链上数据，最大限度减少处罚</p><ul><li><h5 id="等到扇区状态变为terminalfinality"><a href="#等到扇区状态变为terminalfinality" class="headerlink" title="等到扇区状态变为terminalfinality"></a>等到扇区状态变为terminalfinality</h5></li><li><h5 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h5></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span>  &lt;sectorNum&gt;</span><br></pre></td></tr></table></figure><p>这一步的主要作用为清除存储</p><h4 id="5-6、删除扇区中最常范的错误"><a href="#5-6、删除扇区中最常范的错误" class="headerlink" title="5.6、删除扇区中最常范的错误"></a>5.6、删除扇区中最常范的错误</h4><ul><li>很多人会直接执行：lotus-miner sectors remove –really-do-it ,这是错误的。然后找不到扇区编号，也无法terminate. 这样的情况，可以通过</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sectors list --fast --states Remomved</span><br></pre></td></tr></table></figure><ul><li>查看到扇区编号，这个时侯再执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sectors terminate --really-do-it &lt;sectorNum&gt; </span><br></pre></td></tr></table></figure><h2 id="六、扇区修复工具sealer-recover"><a href="#六、扇区修复工具sealer-recover" class="headerlink" title="六、扇区修复工具sealer-recover"></a>六、扇区修复工具sealer-recover</h2><blockquote><p>Filecoin在封装或挖矿过程中，可能面临扇区数据丢失，那么就要被销毁PreCommit预质押的FIL，或者终止扇区最大损失扇区的90天的收益。扇区修复能修复丢失的文件，来减少或者避免损失。</p><p>矿商为了降低封装成本，不得不使用裸盘做存储，来降低成本，提高自己的竞争力，往往会直接使用裸盘做扇区的存储。 16T的盘，可以存储130多个32GiB扇区，如果损坏一个硬盘，数据无法恢复要终止扇区，最大损失扇区90天的全网平均收益。</p><p>在这个情况下，扇区有2个状态会造成损失。</p><ul><li>扇区已经提交了PreCommit消息，但是30内未提交ProveCommit消息，会被销毁PreCommit预质押的FIL；</li><li>设置 <code>FinalizeEarly=false</code>，使用先提交ProveCommit再落到存储，等同丢失扇区需要终止扇区。</li></ul></blockquote><h4 id="6-1、随便准备一台可用的算力机"><a href="#6-1、随便准备一台可用的算力机" class="headerlink" title="6.1、随便准备一台可用的算力机"></a>6.1、随便准备一台可用的算力机</h4><h4 id="6-2、构建go环境"><a href="#6-2、构建go环境" class="headerlink" title="6.2、构建go环境"></a>6.2、构建go环境</h4><ul><li>构建filecoin-sealer-recover，你需要安装<a href="https://golang.org/dl/">Go 1.16.4 or higher</a>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://golang.org/dl/go1.16.4.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local</span><br></pre></td></tr></table></figure><ul><li>构建需要下载一些Go模块。这些通常托管在Github上，而Github来自中国的带宽较低。要解决此问题，请在运行之前通过设置以下变量来使用本地代理</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><ul><li>根据您的 CPU 型号，根据您的需要选择环境变量</li></ul><p>a.如果您有AMD Zen 或 Intel Ice Lake CPU（或更高版本），请通过添加以下两个环境变量来启用 SHA 扩展的使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> RUSTFLAGS=<span class="string">&quot;-C target-cpu=native -g&quot;</span></span><br><span class="line"><span class="built_in">export</span> FFI_BUILD_FROM_SOURCE=1</span><br></pre></td></tr></table></figure><p>b.一些没有 ADX 指令支持的老式 Intel 和 AMD 处理器可能会因为非法指令错误而紊乱。要解决这个问题，添加 CGO_CFLAGS 环境变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CGO_CFLAGS_ALLOW=<span class="string">&quot;-D__BLST_PORTABLE__&quot;</span></span><br><span class="line"><span class="built_in">export</span> CGO_CFLAGS=<span class="string">&quot;-D__BLST_PORTABLE__&quot;</span></span><br></pre></td></tr></table></figure><p>c.默认情况下，证明库中使用“multicore-sdr”选项。 除非明确禁用，否则此功能也用于 FFI。 要禁用“multicore-sdr”依赖项的构建，请将“FFI_USE_MULTICORE_SDR”设置为“0”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FFI_USE_MULTICORE_SDR=0</span><br></pre></td></tr></table></figure><ul><li>Build and install</li></ul><blockquote><p>因为编译这个比较复杂，所以我们已经编译好，直接用我们编译好的二进制文件即可</p><p>将 <code>sealer-recover</code> 解压后拷贝到<code> /usr/local/bin</code>目录下</p></blockquote><ul><li>查看版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sealer-recover --version</span><br></pre></td></tr></table></figure><ul><li>使用方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sealer-recover -h</span><br></pre></td></tr></table></figure><ul><li>启动方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FIL_PROOFS_USE_MULTICORE_SDR=1</span><br><span class="line"><span class="built_in">export</span> FIL_PROOFS_MAXIMIZE_CACHING=1</span><br><span class="line"><span class="built_in">export</span> FIL_PROOFS_USE_GPU_COLUMN_BUILDER=1</span><br><span class="line"><span class="built_in">export</span> FIL_PROOFS_USE_GPU_TREE_BUILDER=1</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> FULLNODE_API_INFO=链节点的token</span><br><span class="line">sealer-recover --miner=f01000 \</span><br><span class="line">    --sectors=0 \ </span><br><span class="line">    --sectors=1 \ </span><br><span class="line">    --sectors=2 \     </span><br><span class="line">    --parallel=6 \ </span><br><span class="line">    --sealing-result=/sector \ </span><br><span class="line">    --sealing-temp=/temp</span><br></pre></td></tr></table></figure><h4 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h4><table><thead><tr><th>参数</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>miner</td><td>需要修复扇区的矿工号</td><td>必填</td></tr><tr><td>sectors</td><td>需要修复的扇区号</td><td>必填</td></tr><tr><td>parallel</td><td>修复扇区p1的并行数, <em>参考核心数进行设置</em></td><td>默认值：1</td></tr><tr><td>sealing-result</td><td>修复后的扇区产物路径</td><td>默认值: ~&#x2F;sector,可自行指定路径</td></tr><tr><td>sealing-temp</td><td>修复过程的中间产物路径，需要大空间，建议使用NVMe盘</td><td>默认值: ~&#x2F;temp 最小空间: 32GiB # &gt; 512GiB! 64GiB # &gt; 1024GiB!，可自行指定路径</td></tr></tbody></table><h2 id="七、如何正确处理错误扇区"><a href="#七、如何正确处理错误扇区" class="headerlink" title="七、如何正确处理错误扇区"></a>七、如何正确处理错误扇区</h2><h4 id="7-1、因网络波动，P2故障"><a href="#7-1、因网络波动，P2故障" class="headerlink" title="7.1、因网络波动，P2故障"></a>7.1、因网络波动，P2故障</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">故障类型为websocket connection closed</span><br><span class="line">lotus-miner info</span><br><span class="line">lotus-miner sectors list --states PreCommitFailed</span><br><span class="line">lotus-miner sectors status --<span class="built_in">log</span> --on-chain-info 扇区号</span><br></pre></td></tr></table></figure><blockquote><p>错误websokket connection closed </p><p>浏览器查看有没有上链</p></blockquote><p>![image-20211112143036566](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112143036566.png)</p><p>![image-20211112143043294](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112143043294.png)</p><blockquote><p>解决方案如下：</p><p>lotus-miner sectors update-state –really-do-it  9756  WaitSeed   </p><p>修改为过5分钟查看状态</p><p>lotus-miner sectors status –log –on-chain-info 9656</p></blockquote><p>![image-20211112143155648](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112143155648.png)</p><blockquote><p>状态为Prvoving   就是正确状态</p></blockquote><h4 id="7-2、因网络波动，C2故障"><a href="#7-2、因网络波动，C2故障" class="headerlink" title="7.2、因网络波动，C2故障"></a>7.2、因网络波动，C2故障</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner info</span><br><span class="line">lotus-miner sectors list --states CommitFailed</span><br></pre></td></tr></table></figure><p>![image-20211112143422402](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112143422402.png)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lotus-miner sectors status --<span class="built_in">log</span> 9471</span><br><span class="line">C2状态为CommitFailed</span><br></pre></td></tr></table></figure><p>![image-20211112143448406](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112143448406.png)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">错误websokket connection closed</span><br></pre></td></tr></table></figure><p>![image-20211112143508653](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112143508653.png)</p><blockquote><p>lotus-miner storage find 9471</p><p>du -sh &#x2F;ceph&#x2F;5p&#x2F;f01417791&#x2F;point01&#x2F;sealed&#x2F;s-t01417791-9471</p><p>du -sh &#x2F;ceph&#x2F;5p&#x2F;f01417791&#x2F;point01&#x2F;cache&#x2F;s-t01417791-9471</p><p>已上都确定是ok</p><p>检查浏览器c2是否上链</p><p>然后执行下面命令</p><p>lotus-miner sectors update-state –really-do-it 9471 Proving  &#x2F;&#x2F;扇区号9471 &#x2F;&#x2F;改成Proving</p><p>lotus-miner sectors status –log –on-chain-info 9471</p></blockquote><p>![image-20211112143538904](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112143538904.png)</p><h4 id="7-3、gas费不足，导致扇区ComputeProofFailed"><a href="#7-3、gas费不足，导致扇区ComputeProofFailed" class="headerlink" title="7.3、gas费不足，导致扇区ComputeProofFailed"></a>7.3、gas费不足，导致扇区ComputeProofFailed</h4><blockquote><p>确认存储中的数据是否正常</p></blockquote><p>![image-20211112143820426](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112143820426.png)</p><blockquote><p>确认扇区数据是否只存在存储中lotus-miner storage find 4669，如果在p1中也有，需要在p1机的&#x2F;opt&#x2F;raid0&#x2F;workercache&#x2F;cache&#x2F; &#x2F;opt&#x2F;raid0&#x2F;workercache&#x2F;sealed&#x2F; &#x2F;opt&#x2F;raid0&#x2F;workercache&#x2F;unsealed&#x2F;这3个目录中删除对应的扇区数据，注意其他扇区数据不能删除</p></blockquote><blockquote><p>查看上链状态，目前P2是上链了，C2没有上链，用lotus-miner sectors status –on-chain-info 4669（lotus-miner sectors status –log –on-chain-info 4669是看详细日志）看C2是否上链，Commit的值是<nil>且InitialPledge的值是0代表C2没有上链</p></blockquote><p>![image-20211112143944507](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112143944507.png)</p><blockquote><p>手动改4669的状态为SubmitCommit，没有报错即可</p><p>lotus-miner sectors update-state –really-do-it 4669 SubmitCommit</p></blockquote><blockquote><p>过1分钟看看扇区转态是否变为SubmitCommit，lotus-miner sectors status –on-chain-info 4669</p></blockquote><p>![image-20211112144024906](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144024906.png)</p><blockquote><p>到浏览器看是否有C2上链消息，网址<a href="https://filfox.info/zh/address/f01372569%EF%BC%8C%E5%85%B6%E4%BB%96%E5%8F%B7%E9%9C%80%E8%A6%81%E6%94%B9%E7%BD%91%E5%9D%80%E7%9A%84fil%E5%8F%B7%E3%80%82%E6%88%96%E8%80%85%E7%94%A8lotus-miner">https://filfox.info/zh/address/f01372569，其他号需要改网址的fil号。或者用lotus-miner</a> sectors status –on-chain-info 4669 | grep InitialPledge</p></blockquote><p>![image-20211112144057524](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144057524.png)</p><p>![image-20211112144107996](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144107996.png)</p><blockquote><p>在可以重启miner的时间重启miner，如果还有其他错误扇区要处理也可以完成上面7步后再重启miner。重启miner后7349变成CommitFailed。miner机执行lotus-miner info看是否有CommitFailed，再确定CommitFailed里面是否有4669，执行lotus-miner sectors list –fast –states CommitFailed</p></blockquote><p>![image-20211112144133690](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144133690.png)</p><blockquote><p>再把4669扇区改为Proving</p><p>lotus-miner sectors update-state –really-do-it 4669 Proving</p></blockquote><blockquote><p>第2天关注这些扇区抽查是否正常</p><p>lotus-miner proving deadlines #下图表示今天1号窗口抽查正常</p></blockquote><p>![image-20211112144211417](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144211417.png)</p><blockquote><p>lotus-miner proving deadline 1 | grep 4669 #命令中的1表示抽查窗口号，如果1号窗口没有看到4669需要在其他有扇区的窗口再过滤。上图和下图表示4669扇区抽查正常。</p></blockquote><p>![image-20211112144235697](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144235697.png)</p><h4 id="7-4、gas费不足，导致扇区CommitFinalizeFailed"><a href="#7-4、gas费不足，导致扇区CommitFinalizeFailed" class="headerlink" title="7.4、gas费不足，导致扇区CommitFinalizeFailed"></a>7.4、gas费不足，导致扇区CommitFinalizeFailed</h4><blockquote><p>用lotus-miner sectors list –fast –states CommitFinalizeFailed查出扇区id</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@miner-f01372569:~<span class="comment"># lotus-miner sectors list --fast --states CommitFinalizeFailed</span></span><br><span class="line">ID State OnChain Active Deals</span><br><span class="line">7349 CommitFinalizeFailed NO NO CC</span><br><span class="line">7369 CommitFinalizeFailed NO NO CC</span><br><span class="line">7379 CommitFinalizeFailed NO NO CC</span><br><span class="line">7391 CommitFinalizeFailed NO NO CC</span><br><span class="line">7396 CommitFinalizeFailed NO NO CC</span><br><span class="line">7397 CommitFinalizeFailed NO NO CC</span><br><span class="line">7399 CommitFinalizeFailed NO NO CC</span><br><span class="line">7431 CommitFinalizeFailed NO NO CC</span><br><span class="line">7444 CommitFinalizeFailed NO NO CC</span><br></pre></td></tr></table></figure><blockquote><p>确认存储的扇区数据是正常的，如果不正常可以从p1机复制过去，如果数据是从p1复制到七牛云的，miner机要手动同步下七牛云视图</p></blockquote><p>![image-20211112144500176](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144500176.png)</p><blockquote><p>执行lotus-miner sectors status 7349看7349是哪个p1机的扇区数据，如果对于p1机有扇区数据，看是否执行好了第2步，执行好了建议备份下扇区数据，比如mv &#x2F;opt&#x2F;raid0&#x2F;workercache&#x2F;cache&#x2F;s-t01372569-7349 &#x2F;usr&#x2F;local&#x2F;src&#x2F;s-t01372569-7349_cache和mv &#x2F;opt&#x2F;raid0&#x2F;workercache&#x2F;sealed&#x2F;s-t01372569-7349 &#x2F;usr&#x2F;local&#x2F;src&#x2F;s-t01372569-7349_sealed等正常后再删除&#x2F;usr&#x2F;local&#x2F;src&#x2F;中对应的数据，总之&#x2F;opt&#x2F;raid0&#x2F;workercache中相关目录中的7349的扇区数据要清理（还要看看&#x2F;opt&#x2F;raid0&#x2F;workercache&#x2F;unsealed&#x2F;中有没有7349这个扇区，有的话也要清理），p1机其他扇区数据不要删除</p></blockquote><blockquote><p>查看上链状态，目前P2是上链了，C2没有上链，用lotus-miner sectors status –on-chain-info 7349（lotus-miner sectors status –log –on-chain-info 7349是看详细日志）看C2是否上链，Commit的值是<nil>且InitialPledge的值是0代表C2没有上链</p></blockquote><p>![image-20211112144543115](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144543115.png)</p><blockquote><p>手动改7349的状态为SubmitCommit，没有报错即可</p><p>lotus-miner sectors update-state –really-do-it 7349 SubmitCommit</p></blockquote><blockquote><p>过1分钟看看扇区转态是否变为SubmitCommit，lotus-miner sectors status 7349</p></blockquote><p>![image-20211112144649329](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144649329.png)</p><blockquote><p>到浏览器看是否有C2上链消息，网址<a href="https://filfox.info/zh/address/f01372569%EF%BC%8C%E5%85%B6%E4%BB%96%E5%8F%B7%E9%9C%80%E8%A6%81%E6%94%B9%E7%BD%91%E5%9D%80%E7%9A%84fil%E5%8F%B7">https://filfox.info/zh/address/f01372569，其他号需要改网址的fil号</a></p></blockquote><p>![image-20211112144714459](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144714459.png)</p><p>![image-20211112144724704](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144724704.png)</p><blockquote><p>在可以重启miner的时间重启miner，如果还有其他错误扇区要处理也可以完成上面7步后再重启miner。重启miner后7349变成CommitFailed。miner机执行lotus-miner info看是否有CommitFailed，再确定CommitFailed里面是否有7349，执行lotus-miner sectors list –fast –states CommitFailed</p></blockquote><p>![image-20211112144807757](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144807757.png)</p><blockquote><p>再把7349扇区改为Proving</p><p>lotus-miner sectors update-state –really-do-it 7349 Proving</p><p>第2天关注这些扇区抽查是否正常</p><p>lotus-miner proving deadlines #下图表示今天1号窗口抽查正常</p></blockquote><p>![image-20211112144904030](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144904030.png)</p><blockquote><p>lotus-miner proving deadline 1 | grep 7349 #命令中的1表示抽查窗口号，如果1号窗口没有看到7349需要在其他有扇区的窗口再过滤。上图和下图表示7349扇区抽查正常。</p></blockquote><p>![image-20211112144925147](&#x2F;Users&#x2F;chengzh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211112144925147.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;filecoin运维文档&quot;&gt;&lt;a href=&quot;#filecoin运维文档&quot; class=&quot;headerlink&quot; title=&quot;filecoin运维文档&quot;&gt;&lt;/a&gt;filecoin运维文档&lt;/h1&gt;&lt;h2 id=&quot;一、filecoin四个阶段概述&quot;&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CDH6的部署和安装</title>
    <link href="http://example.com/2022/07/29/CDH6/"/>
    <id>http://example.com/2022/07/29/CDH6/</id>
    <published>2022-07-29T03:13:29.000Z</published>
    <updated>2022-07-29T04:20:36.280Z</updated>
    
    <content type="html"><![CDATA[<p>CDH6</p><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>​        CDH，全称Cloudera’s Distribution, including Apache Hadoop。是Hadoop众多分支中对应中的一种，由Cloudera维护，基于稳定版本的Apache Hadoop构建，提供了Hadoop的核心（可扩展存储、分布式计算），最为重要的是提供基于web的用户界面。</p><p>　　CDH的优点：版本划分清晰，更新速度快，支持Kerberos安全认证，支持多种安装方式（如Yum、rpm等）。</p><p>　　CDH分为Cloudera Manager管理平台和CDH parcel（parcel包含各种组件的安装包）。这里采用CDH6.2.0。</p><p>  下载：</p><p>   Cloudera Manger下载地址为<a href="https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/RPMS/x86_64/%EF%BC%8C">https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/RPMS/x86_64/，</a></p><p>   CDH6.2.0安装包地址为：<a href="https://archive.cloudera.com/cdh6/6.2.0/parcels/">https://archive.cloudera.com/cdh6/6.2.0/parcels/</a></p><h4 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2. 安装步骤"></a>2. 安装步骤</h4><p>说明：以下操作都是在root用户下进行的</p><h5 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1 环境准备"></a>2.1 环境准备</h5><h6 id="2-1-1-静态IP设置（每个节点）"><a href="#2-1-1-静态IP设置（每个节点）" class="headerlink" title="2.1.1. 静态IP设置（每个节点）"></a>2.1.1. 静态IP设置（每个节点）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"> </span><br><span class="line">service network restart 重启网络生效</span><br><span class="line"> </span><br><span class="line">yum install -y net-tools ifconfig查看设置</span><br></pre></td></tr></table></figure><h6 id="2-1-2-编辑-x2F-etc-x2F-hosts文件（每个节点）"><a href="#2-1-2-编辑-x2F-etc-x2F-hosts文件（每个节点）" class="headerlink" title="2.1.2. 编辑&#x2F;etc&#x2F;hosts文件（每个节点）"></a>2.1.2. 编辑&#x2F;etc&#x2F;hosts文件（每个节点）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line">ip    主机名</span><br></pre></td></tr></table></figure><h6 id="2-1-3-关闭防火墙、禁止防火墙开机自启（每个节点）"><a href="#2-1-3-关闭防火墙、禁止防火墙开机自启（每个节点）" class="headerlink" title="2.1.3. 关闭防火墙、禁止防火墙开机自启（每个节点）"></a>2.1.3. 关闭防火墙、禁止防火墙开机自启（每个节点）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- systemctl stop firewalld 关闭防火墙</span><br><span class="line">- systemctl disable firewalld 禁止防火墙开机自启</span><br><span class="line">- vim /etc/selinux/config —&gt; SELINUX=disabled (修改)</span><br><span class="line">getenforce 0</span><br></pre></td></tr></table></figure><h6 id="2-1-4-ssh无密码登录"><a href="#2-1-4-ssh无密码登录" class="headerlink" title="2.1.4. ssh无密码登录"></a>2.1.4. ssh无密码登录</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -b 4096 -t rsa</span><br><span class="line">ssh-copy-id username@remote-server</span><br></pre></td></tr></table></figure><h6 id="2-1-5-配置NTP服务（所有节点）"><a href="#2-1-5-配置NTP服务（所有节点）" class="headerlink" title="2.1.5. 配置NTP服务（所有节点）"></a>2.1.5. 配置NTP服务（所有节点）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">•修改时区（改为中国标准时区）ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"> •安装ntp yum -y install ntp</span><br><span class="line"> •ntp主机配置 vim /etc/ntp.conf</span><br><span class="line"> •manager节点</span><br><span class="line"> 注释掉原有配置 </span><br><span class="line"> server ntp.aliyun.com (阿里云的时间服务器)</span><br><span class="line"> •其他节点</span><br><span class="line"> server  manager主机名</span><br><span class="line"> •重新启动 ntp 服务：service ntpd restart</span><br><span class="line"> •设置开机自启：systemctl enable ntpd.service</span><br><span class="line"> •ntpdc -c loopinfo #查看与时间同步服务器的时间偏差</span><br><span class="line"> •ntpq -p #查看当前同步的时间服务器</span><br><span class="line"> •ntpstat #查看状态</span><br></pre></td></tr></table></figure><h6 id="2-1-6-禁用透明页-所有节点）"><a href="#2-1-6-禁用透明页-所有节点）" class="headerlink" title="2.1.6. 禁用透明页(所有节点）"></a>2.1.6. 禁用透明页(所有节点）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">永久生效 在/etc/rc.local 添加上面命令</span><br></pre></td></tr></table></figure><h6 id="2-1-7-JDK安装（所有节点）"><a href="#2-1-7-JDK安装（所有节点）" class="headerlink" title="2.1.7. JDK安装（所有节点）"></a>2.1.7. JDK安装（所有节点）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">•rpm -qa | grep java # 查询已安装的java</span><br><span class="line">•yum remove java* # 卸载</span><br><span class="line"> •rpm -ivh oracle-j2sdk1.8-1.8.0+update181-1.x86_64.rpm</span><br><span class="line"> •vi /etc/profile 末尾添加</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> java <span class="built_in">env</span></span></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_271</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"> •source /etc/profile</span><br><span class="line"> •java -version 验证</span><br></pre></td></tr></table></figure><h6 id="2-1-8-安装httpd服务"><a href="#2-1-8-安装httpd服务" class="headerlink" title="2.1.8.安装httpd服务"></a>2.1.8.安装httpd服务</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd</span><br><span class="line">systemctl start httpd</span><br><span class="line">systemctl enable httpd.service （设置httpd服务开机自启）</span><br></pre></td></tr></table></figure><h6 id="2-1-9-配置Cloudera-Manager包yum源（在mdw机器上操作）"><a href="#2-1-9-配置Cloudera-Manager包yum源（在mdw机器上操作）" class="headerlink" title="2.1.9.配置Cloudera Manager包yum源（在mdw机器上操作）"></a>2.1.9.配置Cloudera Manager包yum源（在mdw机器上操作）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/www/html/cloudera-repos/cm6/  然后将下载的文件传到该目录下，</span><br></pre></td></tr></table></figure><p>创建repodata，执行  createrepo . </p><p>创建完成后会在当前目录下生成一个repodata文件夹，如下图所示，如果系统提示找不到createrepo命令，需要执行yum install createrepo.noarch 进行安装</p><p>2.1.10.安装 Cloudera Manager（在mdw机器上操作）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建yum源：</span><br><span class="line">cd /etc/yum.repos.d</span><br><span class="line">vim cloudera-manager.repo ， 按下图内容进行配置</span><br><span class="line">[cloudera-manager]</span><br><span class="line">name = Cloudera Manager, Version</span><br><span class="line">baseurl = http://ip/cloudera-repos/cm6/</span><br><span class="line">gpcheck = 0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum install cloudera-manager-daemons cloudera-manager-agent cloudera-manager-server</span><br></pre></td></tr></table></figure><p>安装成功后，将 CDH-6.2.1-1.cdh6.2.1.p0.4951328-el7.parcel、CDH-6.2.1-1.cdh6.2.1.p0.4951328-el7.parcel.sha1、CDH-6.2.1-1.cdh6.2.1.p0.4951328-el7.parcel.sha256拷贝到 &#x2F;opt&#x2F;cloudera&#x2F;parcel-repo&#x2F;目录中，并且拷贝一份CDH-6.2.1-1.cdh6.2.1.p0.4951328-el7.parcel.sha1文件命名为CDH-6.2.1-1.cdh6.2.1.p0.4951328-el7.parcel.sha，如下图所示：</p><p>&#x2F;opt&#x2F;cloudera&#x2F;parcel-repo&#x2F;下有这些文件</p><p> mysql需要建的库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">create database cmserver default charset utf8 collate utf8_general_ci;</span><br><span class="line">grant all on cmserver.* to &#x27;cmserveruser&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">create database metastore default charset utf8 collate utf8_general_ci;</span><br><span class="line">grant all on metastore.* to &#x27;hiveuser&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">create database amon default charset utf8 collate utf8_general_ci;</span><br><span class="line">grant all on amon.* to &#x27;amonuser&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">create database rman default charset utf8 collate utf8_general_ci;</span><br><span class="line">grant all on rman.* to &#x27;rmanuser&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">create database oozie default charset utf8 collate utf8_general_ci;</span><br><span class="line">grant all on oozie.* to &#x27;oozieuser&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">create database hue default charset utf8 collate utf8_general_ci;</span><br><span class="line">grant all on hue.* to &#x27;hueuser&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;</span><br></pre></td></tr></table></figure><p>2.1.11执行初始化脚本（在mdw机器上操作）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">•/opt/cloudera/cm/schema/scm_prepare_database.sh mysql scm scm password</span><br></pre></td></tr></table></figure><p>执行成功后，启动server服务 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service cloudera-scm-server start</span><br></pre></td></tr></table></figure><p>查看端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lanp | grep 7180</span><br></pre></td></tr></table></figure><p>查看进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pa -aux |grep cloudera </span><br></pre></td></tr></table></figure><p>浏览器访问</p><p><a href="http://主机ip:7180/cmf/login">http:&#x2F;&#x2F;主机ip:7180&#x2F;cmf&#x2F;login</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CDH6&lt;/p&gt;
&lt;h4 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h4&gt;&lt;p&gt;​        CDH，全称Cloudera’s Distribution, including </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ELKF日志管理平台搭建</title>
    <link href="http://example.com/2022/07/29/ELKF/"/>
    <id>http://example.com/2022/07/29/ELKF/</id>
    <published>2022-07-29T03:13:29.000Z</published>
    <updated>2022-07-29T04:06:01.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ELKF日志管理平台搭建"><a href="#ELKF日志管理平台搭建" class="headerlink" title="ELKF日志管理平台搭建"></a>ELKF日志管理平台搭建</h2><h3 id="一、安装Filebeat"><a href="#一、安装Filebeat" class="headerlink" title="一、安装Filebeat"></a>一、安装Filebeat</h3><p>1.下载<a href="https://www.elastic.co/cn/downloads/beats/filebeat#ga-release">Filebeat</a>并上传至服务器&#x2F;home&#x2F;software目录</p><p>2.解压并重命名文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# cd /home/software/</span><br><span class="line">[root@localhost software]# tar -xvf filebeat-7.4.0-linux-x86_64.tar.gz</span><br><span class="line">[root@localhost software]# mv filebeat-7.4.0-linux-x86_64 filebeat</span><br></pre></td></tr></table></figure><p>3.修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# vim filebeat/filebeat.yml</span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">更改为<span class="literal">true</span>以启用此输入配置</span></span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">修改系统日志所在位置</span></span><br><span class="line">    - /var/log/nginx/*.log</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">to add additional information to the crawled <span class="built_in">log</span> files <span class="keyword">for</span> filtering</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">配置索引名</span></span><br><span class="line">  fields:</span><br><span class="line">     machine: master</span><br><span class="line">     #应用名称</span><br><span class="line">     app: job-center</span><br><span class="line">  multiline.pattern: ^\[</span><br><span class="line">  multiline.negate: true</span><br><span class="line">  multiline.match: after</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">此处filebeat.inputs可以配置多个</span> </span><br><span class="line"></span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  reload.enabled: false</span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">setup.kibana:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-------------------------- Elasticsearch output ------------------------------</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">output.elasticsearch:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Array of hosts to connect to.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">hosts: [<span class="string">&quot;localhost:9200&quot;</span>]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Optional protocol and basic auth credentials.</span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">protocol: <span class="string">&quot;https&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">username: <span class="string">&quot;elastic&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">password: <span class="string">&quot;changeme&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">----------------------------- Logstash output --------------------------------</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注释掉ElasticSearch output中内内容让它不直接输出到ElasticSearch</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改Logstash output中的output.logstash.hosts为你的Logstash所在机器</span></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [&quot;localhost:5044&quot;]</span><br><span class="line">processors:</span><br><span class="line">  - add_host_metadata: ~</span><br><span class="line">  - add_cloud_metadata: ~</span><br></pre></td></tr></table></figure><p>4.启动&#x2F;停止应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost filebeat]# nohup ./filebeat -e -c filebeat.yml &amp;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看应用进程</span></span><br><span class="line">[root@localhost filebeat]# ps -aux|grep filebeat</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">杀死进程</span></span><br><span class="line">[root@localhost filebeat]# kill -9 进程号</span><br></pre></td></tr></table></figure><h3 id="二、安装logstash"><a href="#二、安装logstash" class="headerlink" title="二、安装logstash"></a>二、安装logstash</h3><p>1.下载<a href="https://www.elastic.co/cn/downloads/logstash">Logstash</a>并上传至服务器<code>/home/software</code>目录</p><p>2.解压并重命名文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# cd /home/software/</span><br><span class="line">[root@localhost software]# tar -xvf logstash-7.4.0.tar.gz</span><br><span class="line">[root@localhost software]# mv logstash-7.4.0 logstash</span><br></pre></td></tr></table></figure><p>3.修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# vim logstash/config/logstash-sample.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sample Logstash configuration <span class="keyword">for</span> creating a simple</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">beats.port配置接收Filebeat的数据的端口</span></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">output.elasticsearch配置在ElasticSearch中生成索引名的规则</span></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;http://localhost:9200&quot;]</span><br><span class="line">    #在ElasticSearch中生成索引名的规则[logstash-job-center-2019.10.16]</span><br><span class="line">    #这里通过生成不同的索引名来区分不同模块的日志文件</span><br><span class="line">    #Filebeat中配置fields.app</span><br><span class="line">    index =&gt; &quot;logstash-%&#123;[fields][app]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    #user =&gt; &quot;elastic&quot;</span><br><span class="line">    #password =&gt; &quot;changeme&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 filebeat.inputs 是可以定义多个的，每个 filebeat.inputs 对应一个微服务模块日志配置，我们可以在fields下面自定义一些属性，然后在logstash的配置文件中获取到这个自定义属性，通过判断自定义属性来对每个模块做个性化索引配置。</p><p>4.启动&#x2F;停止应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost logstash]# nohup ./bin/logstash -f ./config/logstash-sample.conf &amp;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看应用进程</span></span><br><span class="line">[root@localhost logstash]# ps -aux|grep logstash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">杀死进程</span></span><br><span class="line">[root@localhost logstash]# kill -9 进程号</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.错误处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.exclusive is deprecated, use Thread::Mutex</span><br></pre></td></tr></table></figure><p>解决：在 logstash.yml 文件中找到 Data path 的路径(默认在安装目录的data目录下）</p><p>查看是否存在 .lock 文件，如果存在把它删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@ELK1 data]# ls -alh</span><br><span class="line">总用量 20K</span><br><span class="line">drwxr-sr-x  4 tingshuo staff 4.0K 8月 19 11:42 .</span><br><span class="line">drwxr-sr-x 14 tingshuo staff 4.0K 8月 19 11:42 ..</span><br><span class="line">drwxr-sr-x  2 tingshuo staff 4.0K 8月 19 11:42 dead_letter_queue</span><br><span class="line">-rw-r--r--  1 tingshuo staff    0 8月 19 11:42 .lock</span><br><span class="line">drwxr-sr-x  2 tingshuo staff 4.0K 8月 19 11:42 queue</span><br><span class="line">-rw-r--r--  1 tingshuo staff   36 8月 19 11:42 uuid</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除带lock的文件</span></span><br><span class="line">[root@ELK1 data]# rm .lock</span><br></pre></td></tr></table></figure><h3 id="三、安装ElasticSearch"><a href="#三、安装ElasticSearch" class="headerlink" title="三、安装ElasticSearch"></a>三、安装ElasticSearch</h3><p>1.下载<a href="https://www.elastic.co/cn/downloads/elasticsearch">ElasticSearch</a>并上传至服务器<code>/home/software</code>目录</p><p> 2.解压并重命名文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# cd /home/software/</span><br><span class="line">[root@localhost software]# tar -xvf elasticsearch-7.4.0-linux-x86_64.tar.gz</span><br><span class="line">[root@localhost software]# mv elasticsearch-7.4.0-linux-x86_64 elasticsearch</span><br></pre></td></tr></table></figure><p>3.修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[elk@localhost elasticsearch]$ vim config/elasticsearch.yml</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果配置集群，不同ElasticSearch节点的node.name和http.port需要保持唯一</span></span><br><span class="line">cluster.name: my-app-1</span><br><span class="line">node.name: node-1</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取消注释保留一个节点</span></span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br></pre></td></tr></table></figure><p>4.非root用户启动设置</p><p>我们需要创建一个elk用户和组，因为ElasticSearch不能以root身份运行，否则将会报错，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加elk用户组</span></span><br><span class="line">[root@localhost elasticsearch]# groupadd elk</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">为用户组添加elk用户</span></span><br><span class="line">[root@localhost elasticsearch]# useradd -g elk elk</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">赋予权限</span></span><br><span class="line">[root@localhost elasticsearch]# chown -R elk:elk /usr/local/elasticsearch</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动es</span></span><br><span class="line">[elk@localhost elasticsearch]$ /home/software/elasticsearch/bin/elasticsearch -d</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">验证启动成功否、看到进程号就说明启动成功了</span></span><br><span class="line">[elk@localhost elasticsearch]$ ps -aux|grep elasticsearch</span><br></pre></td></tr></table></figure><p>5.启动&#x2F;停止应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-d后台启动</span></span><br><span class="line">[root@localhost elasticsearch]# /home/software/elasticsearch/bin/elasticsearch -d</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看应用进程</span></span><br><span class="line">[root@localhost elasticsearch]# ps -aux|grep elasticsearch</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">杀死进程</span></span><br><span class="line">[root@localhost elasticsearch]# kill -9 进程号</span><br></pre></td></tr></table></figure><p>6.启动报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[elk@localhost elasticsearch]$ ERROR: [3] bootstrap checks failed</span><br><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class="line">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">[3]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</span><br></pre></td></tr></table></figure><ul><li>解决错误[1、2] 以root身份执行下面的脚本，执行后要重新登录普通账户启动ES</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;* soft nofile 65536&quot;&gt;&gt;/etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">echo &quot;* hard nofile 65536&quot;&gt;&gt;/etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">echo &quot;* soft memlock unlimited&quot;&gt;&gt;/etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">echo &quot;* hard memlock unlimited&quot;&gt;&gt;/etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">echo &quot;vm.max_map_count = 262144&quot;&gt;&gt;/etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line">ulimit -l unlimited</span><br></pre></td></tr></table></figure><ul><li>解决错误[3]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取消注释保留一个节点</span></span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br></pre></td></tr></table></figure><p>7.验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[elk@localhost elasticsearch]$ curl http://localhost:9200/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;node-1&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;my-app-1&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;7i63wZl1SPCbsuQCJjrK5g&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.4.0&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;tar&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;22e1767283e61a198cb4db791ea66e3f11ab9910&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2019-09-27T08:36:48.569419Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.2.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、安装Kibana"><a href="#四、安装Kibana" class="headerlink" title="四、安装Kibana"></a>四、安装Kibana</h3><p> 1.下载<a href="https://www.elastic.co/cn/downloads/kibana">Kibana</a>并上传至服务器<code>/home/software</code>目录</p><p>2.解压并重命名文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# cd /home/software/</span><br><span class="line">[root@localhost software]# tar -xvf kibana-7.4.0-linux-x86_64.tar.gz</span><br><span class="line">[root@localhost software]# mv kibana-7.4.0-linux-x86_64 kibana</span><br></pre></td></tr></table></figure><p>3.修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里需要需改为实际IP，否则外部浏览器无法访问</span></span><br><span class="line">server.host: &quot;192.xxx.xxx.xxx&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">汉化</span></span><br><span class="line">i18n.locale: &quot;zh-CN&quot;</span><br></pre></td></tr></table></figure><p>4.启动&#x2F;停止应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">后台启动</span></span><br><span class="line">[elk@localhost kibana]$ nohup ./bin/kibana --allow-root &amp;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看应用进程</span></span><br><span class="line">[root@localhost kibana]# ps -aux|grep kibana</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">杀死进程</span></span><br><span class="line">[root@localhost kibana]# kill -9 进程号</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以上查不到进程则使用如下命令</span></span><br><span class="line">[root@localhost config]# netstat -tunlp|grep 5601</span><br></pre></td></tr></table></figure><p>5.Kibana设置</p><ul><li>访问浏览器：http:&#x2F;&#x2F;本机ip:5601</li></ul><ul><li><p>管理–&gt;索引模式–&gt;创建索引模式</p></li><li><p>在Discover查看我们刚刚建立的索引规则匹配到的索引数据，如图所示</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ELKF日志管理平台搭建&quot;&gt;&lt;a href=&quot;#ELKF日志管理平台搭建&quot; class=&quot;headerlink&quot; title=&quot;ELKF日志管理平台搭建&quot;&gt;&lt;/a&gt;ELKF日志管理平台搭建&lt;/h2&gt;&lt;h3 id=&quot;一、安装Filebeat&quot;&gt;&lt;a href=&quot;#一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>fastDFS安装搭建</title>
    <link href="http://example.com/2022/07/29/fastdfs/"/>
    <id>http://example.com/2022/07/29/fastdfs/</id>
    <published>2022-07-29T03:13:29.000Z</published>
    <updated>2022-07-29T04:07:10.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fastDFS安装搭建"><a href="#fastDFS安装搭建" class="headerlink" title="fastDFS安装搭建"></a>fastDFS安装搭建</h1><h3 id="FastDFS环境搭建"><a href="#FastDFS环境搭建" class="headerlink" title="FastDFS环境搭建"></a>FastDFS环境搭建</h3><h5 id="1、首先检查下安装环境-按照顺序执行一下命令"><a href="#1、首先检查下安装环境-按照顺序执行一下命令" class="headerlink" title="1、首先检查下安装环境, 按照顺序执行一下命令"></a>1、首先检查下安装环境, 按照顺序执行一下命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake</span><br><span class="line">yum -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure><p>1.2、安装包下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/happyfish100/libfastcommon/archive/V1.0.7.tar.gz</span><br><span class="line">wget http://jaist.dl.sourceforge.net/project/fastdfs/FastDFS%20Nginx%20Module%20Source%20Code/fastdfs-nginx-module_v1.16.tar.gz</span><br><span class="line">wget https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz</span><br><span class="line">wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure><h5 id="2、安装libfastcommon工程"><a href="#2、安装libfastcommon工程" class="headerlink" title="2、安装libfastcommon工程"></a>2、安装<strong>libfastcommon</strong>工程</h5><p>   2.1、解压<strong>libfastcommon</strong>工程到目标路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip libfastcommon-master.zip -d /opt/module/</span><br></pre></td></tr></table></figure><p>   2.2、进入解压的libfastcommon目录进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/module</span><br><span class="line">./make.sh</span><br></pre></td></tr></table></figure><p>   2.3、安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./make.sh install</span><br></pre></td></tr></table></figure><p>   2.4、复制libfastcommon.so文件到usr&#x2F;lib下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/module/fastdfs-master/conf/* /etc/fdfs/</span><br></pre></td></tr></table></figure><h5 id="3-安装FastDFS工程"><a href="#3-安装FastDFS工程" class="headerlink" title="3.安装FastDFS工程"></a>3.安装FastDFS工程</h5><p>  3.1、解压FastDFS工程到目标路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip fastdfs-master.zip -d /opt/module/</span><br></pre></td></tr></table></figure><p>  3.2、进入解压后的FastDFS目录进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./make.sh </span><br></pre></td></tr></table></figure><p>  3.3、安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./make.sh install</span><br></pre></td></tr></table></figure><p>  3.4、将FastDFS目录下的conf文件夹里的所有文件拷贝到&#x2F;etc&#x2F;fdfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/module/fastdfs-master/conf/* /etc/fdfs/</span><br></pre></td></tr></table></figure><h5 id="4-安装tracker"><a href="#4-安装tracker" class="headerlink" title="4.安装tracker"></a>4.安装tracker</h5><p>  4.1、进入&#x2F;etc&#x2F;fdfs目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs</span><br></pre></td></tr></table></figure><p>  4.2、修改tracker.conf文件。如果不存在，就拷贝tracker.conf.sample文件为tracker.conf，然后再修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim tracker.conf</span><br><span class="line">需要修改的内容:</span><br><span class="line">1) base_path</span><br><span class="line">原:base_path=/home/yuqing/fastdfs</span><br><span class="line">修改后: base_path=/home/logs/fastdfs （注解：建议放在数据盘）</span><br><span class="line">2) http.server_port</span><br><span class="line">原: http.server_port=8080</span><br><span class="line">修改后: http.server_port=80（注解：修改为自己定的端口）</span><br><span class="line">3) store_group</span><br><span class="line">原: store_group=group2</span><br><span class="line">修改后: store_group=group1</span><br></pre></td></tr></table></figure><p>  4.3、之后，就启动tracker，并查看是启动成功：restart重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdfs_trackerd /etc/fdfs/tracker.conf start</span><br></pre></td></tr></table></figure><p>  4.4、查看tracker是否启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -unltp | grep tracker</span><br></pre></td></tr></table></figure><h5 id="5、安装storage"><a href="#5、安装storage" class="headerlink" title="5、安装storage"></a>5、安装storage</h5><p>  5.1、进入&#x2F;etc&#x2F;fdfs目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs</span><br></pre></td></tr></table></figure><p>  5.2、修改storage.conf文件。如果不存在，就拷贝storage.conf.sample文件为storage.conf，然后再修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim storage.conf</span><br><span class="line">需要修改的内容:</span><br><span class="line">1) base_path</span><br><span class="line">原: base_path=/home/yuqing/fastdfs</span><br><span class="line">修改后: base_path=/home/logs/storage （注解：建议放在数据盘）</span><br><span class="line">2) store_path0</span><br><span class="line">原: store_path0=/home/yuqing/fastdfs</span><br><span class="line">修改后: store_path0=/home/data/storage（注解：建议放在数据盘）</span><br><span class="line">3) tracker_server</span><br><span class="line">原: tracker_server=192.168.209.121:22122</span><br><span class="line">修改后: tracker_server=IP:22122</span><br><span class="line">4) group_name</span><br><span class="line">原: group_name=group1(必须要和tracker的组名相同，由于此处是相同的所以不需要修改)</span><br><span class="line">5) http.server_port</span><br><span class="line">原: http.server_port=8888</span><br><span class="line">修改后: http.server_port=80(注解：和上面的tracker的端口一致)</span><br></pre></td></tr></table></figure><p>  5.3、启动storage，并查看是否启动成功，其它操作则把 start 改为 stop、restart、reload、status 即可。Storage 服务相同。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdfs_storaged /etc/fdfs/storage.conf start</span><br></pre></td></tr></table></figure><p>  5.4、查看是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdfs_monitor /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><h5 id="6、查看tracker和storage是不是在通信"><a href="#6、查看tracker和storage是不是在通信" class="headerlink" title="6、查看tracker和storage是不是在通信"></a>6、查看tracker和storage是不是在通信</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdfs_monitor /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><h5 id="7、测试图片上传"><a href="#7、测试图片上传" class="headerlink" title="7、测试图片上传"></a>7、<strong>测试图片上传</strong></h5><p>Tracker和storage都已经安装完成，使用命令测试文件上传</p><p>FastDFS提供一个文件上传命令：usr&#x2F;bin&#x2F;fdfs_test 测试文件上传。测试上传需要连接tracker服务器，连接storage服务器。因此需要指定一个配置文件：client.conf配置文件，通过Client.conf连接tracker服务器。修改&#x2F;etc&#x2F;fdfs下client.conf。</p><p> 7.1、修改client.conf</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim client.conf</span><br><span class="line">需要修改的内容:</span><br><span class="line">1) base_path</span><br><span class="line">原: base_path=/home/yuqing/fastdfs</span><br><span class="line">修改后: base_path=/home/logs/client（注解：建议放在数据盘）</span><br><span class="line">2) tracker_server</span><br><span class="line">原: tracker_server=192.168.0.197:22122</span><br><span class="line">修改后: tracker_server=IP:22122</span><br></pre></td></tr></table></figure><p>7.2、测试命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_test /etc/fdfs/client.conf upload test.jpg</span><br></pre></td></tr></table></figure><h5 id="8、ngxin安装"><a href="#8、ngxin安装" class="headerlink" title="8、ngxin安装"></a>8、ngxin安装</h5><p> 8.1、nginx环境安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1) yum install gcc-c++</span><br><span class="line"></span><br><span class="line">2) yum install -y pcre pcre-devel</span><br><span class="line"></span><br><span class="line">3) yum install -y zlib zlib-devel</span><br><span class="line"></span><br><span class="line">4) yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><p> 8.2、解压nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf xxxxxx -C ../module/</span><br></pre></td></tr></table></figure><p> 8.3、进入解压后的nginx目录, 依次执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) ./configure</span><br><span class="line">2) make</span><br><span class="line">3) make install</span><br></pre></td></tr></table></figure><h5 id="9、安装安装fastdfs-nginx-module"><a href="#9、安装安装fastdfs-nginx-module" class="headerlink" title="9、安装安装fastdfs-nginx-module"></a>9、安装<strong>安装fastdfs-nginx-module</strong></h5><p> 9.1、解压安装fastdfs-nginx-module</p><p> 9.2、拷贝usr&#x2F;lib64目录下库文件libfdfsclient.so</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/lib64/libfdfsclient.so /usr/lib </span><br></pre></td></tr></table></figure><p> 9.3、在nginx安装目录下执行如下命令：把module添加nginx中。通过设置安装参数方式添加模块。进入nginx目录，然后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --add-module=../fastdfs-nginx-module-master/src/</span><br></pre></td></tr></table></figure><p> 9.4、重新编译安装nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></table></figure><p> 9.5、复制 fastdfs-nginx-module 源码中的配置文件到&#x2F;etc&#x2F;fdfs 目录， 并修改</p><p> 9.6、进入&#x2F;etc&#x2F;fdfs&#x2F;修改mod_fastdfs.conf如下配置，其他默认</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1) connect_timeout=10</span><br><span class="line">2) tracker_serverIP:22122</span><br><span class="line">3) storage_server_port=23000</span><br><span class="line">4) url_have_group_name = true</span><br><span class="line">5) store_path0=/home/data/storage（注解：和上面storage保持一致）</span><br><span class="line">6) base_path=/home/logs/storage（注解：建议放在数据盘）</span><br></pre></td></tr></table></figure><p> 9.7、配置nginx配置文件</p><p>  9.7.1、修改配置，其它的默认，在80端口下添加fastdfs-nginx模块</p><pre><code>                           <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">location ~/group([0-9])/M00 &#123;    </span><br><span class="line">ngx_fastdfs_module; </span><br><span class="line">&#125;</span><br><span class="line">注意nginx.conf中#user  nobody;改成 #user  root;</span><br></pre></td></tr></table></figure></code></pre><p> 9.8、启动nginx, 访问图片路径地址进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在地址栏中访问成功 http://IP/group1/M00/00/00/wKgAyV-uOlmAWqXOAAAk48ROrBM024_big.jpg</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;fastDFS安装搭建&quot;&gt;&lt;a href=&quot;#fastDFS安装搭建&quot; class=&quot;headerlink&quot; title=&quot;fastDFS安装搭建&quot;&gt;&lt;/a&gt;fastDFS安装搭建&lt;/h1&gt;&lt;h3 id=&quot;FastDFS环境搭建&quot;&gt;&lt;a href=&quot;#FastDF</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>graylog的安装部署</title>
    <link href="http://example.com/2022/07/29/graylog/"/>
    <id>http://example.com/2022/07/29/graylog/</id>
    <published>2022-07-29T03:13:29.000Z</published>
    <updated>2022-07-29T04:22:21.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="graylog的安装部署"><a href="#graylog的安装部署" class="headerlink" title="graylog的安装部署"></a>graylog的安装部署</h1><p><a href="https://blog.csdn.net/weixin_41004350/article/details/87253316">https://blog.csdn.net/weixin_41004350/article/details/87253316</a></p><p>  日志管理系统，大家普遍知道的都是ELK的解决方案，但是ELK要实现认证和一些状态监控，需要安装x-pack插件包，但是x-pack是要收费的，当然可以选择破解，但是比较麻烦。而且ELK是一个解决方案，在其中包含很多软件，不单elasticsearch,kibana,logstash,还需要redis或kafaka，收集日志还需要不同的beats，整个结构非常复杂，且占用较多资源，要想完全搞懂需要较长时间。</p><p>  但是很多时候，公司系统并不大，使用ELK的成本太高，可以使用一些替代方案，除了ELK还有很多日志管理工具，这里就介绍其中的一个很不错的日志方案：Graylog，Graylog是一个可以跟ELK相提并论的日志管理的后起之秀，一个开源的 log 收容器，背后的储存是搭配 mongodb，而搜寻引擎则由 elasticsearch 提供，自身集成web端，不需要单独部署，目前最新为3.0版本。</p><p>  下面就详细记录一下，graylog3.0的安装与配置和使用。<a href="http://docs.graylog.org/en/3.0/index.html">官方文档入口</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><p>安装jdk8，安装方案，详见《<a href="https://blog.csdn.net/weixin_41004350/article/details/78491472">centos7.2 安装 JDK-1.8</a>》</p><p>安装依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install pwgen -y</span><br></pre></td></tr></table></figure><h2 id="二、安装mongodb"><a href="#二、安装mongodb" class="headerlink" title="二、安装mongodb"></a>二、安装mongodb</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">添加源</span><br><span class="line">vim /etc/yum.repos.d/mongodb-org-3.6.repo</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">[mongodb-org-4.0]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">yum install -y mongodb-org</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl <span class="built_in">enable</span> mongod</span></span><br><span class="line">systemctl start mongod</span><br></pre></td></tr></table></figure><h2 id="三、安装elasticsearch"><a href="#三、安装elasticsearch" class="headerlink" title="三、安装elasticsearch"></a>三、安装elasticsearch</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line"> </span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">graylog3.0 使用的elasticsearch不低于5.6.13版本，我这里用的最新版6.x</span></span><br><span class="line">vim /etc/yum.repos.d/elasticsearch.repo</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">[elasticsearch-6.x]</span><br><span class="line">name=Elasticsearch repository for 6.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">yum install elasticsearch</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置，设置JAVA_HOME</span></span><br><span class="line">vim /etc/sysconfig/elasticsearch</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_191   # 填上自己的java_home路径  默认的为/usr/bin/java</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">systemctl enable elasticsearch</span><br><span class="line">systemctl start elasticsearch</span><br></pre></td></tr></table></figure><h2 id="四、安装Groylog"><a href="#四、安装Groylog" class="headerlink" title="四、安装Groylog"></a>四、安装Groylog</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://packages.graylog2.org/repo/packages/graylog-3.0-repository_latest.rpm</span><br><span class="line">yum install graylog-server -y</span><br></pre></td></tr></table></figure><p>修改配置， password_secret和root_password_sha2是必须的，不设置则无法启动，设置方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置</span></span><br><span class="line">vim /etc/graylog/server/server.conf</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">passworde_secret可以通过命令：pwgen -N 1 -s 96 来随机生成，下面就是我随机生成的</span></span><br><span class="line">password_secret = 6Z06fZHU2DwuOf9X8fhnvphCd3OM7oqwLECRRcejvjpieSvVtwu08yHYHIKDi56bAxRvtCOZ3xKKiBqyt00XYCgVa0oETB0L</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">admin用户密码生成命令：<span class="built_in">echo</span> -n yourpassword | <span class="built_in">sha256sum</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成后，请记住你的 YourPassword</span></span><br><span class="line">root_password_sha2 = e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">admin用户邮箱</span></span><br><span class="line">root_email = &quot;root@example.com&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">时区</span></span><br><span class="line">root_timezone = Asia/Shanghai</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">elasticsearch 相关配置</span></span><br><span class="line">elasticsearch_hosts = http://127.0.0.1:9200</span><br><span class="line">elasticsearch_shards =1 </span><br><span class="line">elasticsearch_replicas = 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongodb 连接配置，这里直接本机起的mongodb，没有设置验证</span></span><br><span class="line">mongodb_uri = mongodb://localhost/graylog</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">电子邮件smtp,设置为自己的邮箱smtp服务</span></span><br><span class="line">transport_email_enabled = true</span><br><span class="line">transport_email_hostname = smtp.exmail.qq.com</span><br><span class="line">transport_email_port = 465</span><br><span class="line">transport_email_use_auth = true</span><br><span class="line">transport_email_use_tls = false</span><br><span class="line">transport_email_use_ssl = true</span><br><span class="line">transport_email_auth_username = root@example.com</span><br><span class="line">transport_email_auth_password = 123456</span><br><span class="line">transport_email_subject_prefix = [graylog]</span><br><span class="line">transport_email_from_email = root@example.com</span><br><span class="line">transport_email_web_interface_url = http://graylog.example.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网络访问相关，重要，graylog3比2.x版本简洁了很多网络配置，只需配置http_bind_address即可。</span></span><br><span class="line">http_bind_address = 0.0.0.0:9000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置外网地址，我这里用了域名+nginx做反向代理，所以外网地址如下。没有的话就直接就用外网ip+port，如：http://外网ip:9000/</span></span><br><span class="line">http_publish_uri = http://graylog.example.com/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http_external_uri = http://graylog.example.com/ 单节点的话，此配置不需要配置，默认使用http_publish_uri</span></span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动需要手动设置Java路径</span></span><br><span class="line">vim /etc/sysconfig/graylog-server</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">JAVA=/usr/local/jdk1.8.0_191/bin/java</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">systemctl enable graylog-server</span><br><span class="line">systemctl start graylog-server</span><br></pre></td></tr></table></figure><h2 id="五、访问web页面"><a href="#五、访问web页面" class="headerlink" title="五、访问web页面"></a>五、访问web页面</h2><p> 按照上面配置，直接配置成外网ip地址，那么直接访问 http:&#x2F;&#x2F;外网ip:9000，就可以进入web登陆页面</p><p>输入用户密码登陆</p><h2 id="六、安装Graylog-Sidecar（Graylog-Collector-Sidecar）"><a href="#六、安装Graylog-Sidecar（Graylog-Collector-Sidecar）" class="headerlink" title="六、安装Graylog Sidecar（Graylog Collector Sidecar）"></a>六、安装Graylog Sidecar（Graylog Collector Sidecar）</h2><p>  Graylog Sidecar是一个轻量级配置管理系统，适用于不同的日志收集器，也称为后端。Graylog节点充当包含日志收集器配置的集中式集线器。在支持的消息生成设备&#x2F;主机上，Sidecar可以作为服务（Windows主机）或守护程序（Linux主机）运行。进行在不同机器上进行日志的采集并发送到graylog server</p><p>  在graylog3.0版本以前，称为Graylog Collector Sidecar，在3.0中改为了Graylog Sidecar，在官方文档中有详细安装指导：<a href="http://docs.graylog.org/en/3.0/pages/sidecar.html">官方文档入口</a>。这里也参考进行安装。版本对照表如下，首先去github上下载相应的rpm安装包。<a href="https://github.com/Graylog2/collector-sidecar/releases">官方GITHUB下载地址</a></p><table><thead><tr><th><strong>Sidecar version</strong></th><th>Graylog server version</th></tr></thead><tbody><tr><td>1.0.x</td><td>3.0.x</td></tr><tr><td>0.1.x</td><td>2.2.x,2.3.x,2.4.x,2.5.x,3.0.x</td></tr><tr><td>0.0.9</td><td>2.1.x</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">rpm -i graylog-sidecar-1.0.0-1.x86_64.rpm</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置</span></span><br><span class="line">vim /etc/graylog/sidecar/sidecar.yml</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">server_url: &quot;hhttp://graylog.example.com/api/&quot;    # api的外网地址</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">api token 必要的，不然启动不了，token需要在web界面上进行手动创建</span></span><br><span class="line">server_api_token: &quot;1jq26cssvc6rj4qac4bt9oeeh0p4vt5u5kal9jocl1g9mdi4og3n&quot;</span><br><span class="line">node_name: &quot;graylog-server-localhost&quot;    # 自定义节点名称</span><br><span class="line">update_interval: 10</span><br><span class="line">send_status: true</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装系统服务</span></span><br><span class="line">graylog-sidecar -service install</span><br><span class="line">systemctl start graylog-sidecar</span><br></pre></td></tr></table></figure><p>手动创建server_api_token。如图：</p><p>ok，到此就可以启动graylog-sidecar了。启动后，在web界面上就可以看到一个节点了，然后下面记录怎么手动配置这个节点的日志采集。首先需要创建一个beats的input，因为我要要用filebeat进行日志采集。</p><p>然后就需要定义sidecar的filebeat配置，用这个配置来启动filebeat进行日志采集，并输入到上面定义的beats input。但是graylog3.0中，graylog sidecar的linux版本不包含filebeat(3.0版本之前是默认包含filebeat的)，需要自己手动下载安装filebeat，安装非常简单，通过官方下载页面，直接下载rpm包进行安装就行： <a href="https://www.elastic.co/downloads/beats/filebeat">官方下载地址</a></p><p>PS：我这里是演示的用filebeat进行日志采集，如果用nxlog进行采集，同样的需要安装nxlog程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装，目前最新版6.6.0</span></span><br><span class="line">rpm -i filebeat-6.6.0-x86_64.rpm</span><br></pre></td></tr></table></figure><p>ok，就这样就ok啦，然后下面在web界面上进行配置</p><p>这里我以采集本机上graylog-server的日志为例子，自定义变量中定义beats input服务的ip和端口，使得sidecar采集器能将数据输入指定input，并可以在所有配置中直接复用。</p><p>配置创建完成后，需要将配置与指定sidecar进行联系，然后sidecar就能以执行配置启动filebeat进行日志采集。如图：</p><p>然后就能在web界面上，看到采集到的graylog-server的日志</p><p>用centos自带的日志系统</p><p>公司很多的虚拟机都是centos7的操作系统，带有rsyslog服务，可以使用syslog协议将系统日志发送到graylog上进行收集，可以指定端口。**<br>**</p><p> 必须注意的是， 很多linux发行版的非root用户是无法使用1024以下的端口的，这些被称为特权端口。本次使用udp1515端口收集。</p><p>使用rsyslog转发syslog消息很容易。充分利用日志的唯一重要事项是遵循 RFC 5424。按照如下示例配置您的rsyslog守护程序将RFC 5424日期发送到Graylog syslog输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/rsyslog.d/greylog.conf                  #创建rsyslog额外配置文件</span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/rsyslog.d/greylog.conf             #编辑配置文件</span><br><span class="line">*.* @192.168.99.40:1515;RSYSLOG_SyslogProtocol23Format       #*.* 代表linux中所有模块所有级别的日志，@代表使用udp协议，@@代表使用tcp协议，192.168.99.40:1515greylog主机的IP和收集端口</span><br><span class="line">EOF                                 #RSYSLOG_SyslogProtocol23Format 代表syslog协议格式模板</span><br></pre></td></tr></table></figure><p>配置完成后，重启rsyslog服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rsyslog</span><br><span class="line">systemctl enable rsyslog</span><br></pre></td></tr></table></figure><p>防火墙加日志在防火墙的配置上写日志服务器ip和端口</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;graylog的安装部署&quot;&gt;&lt;a href=&quot;#graylog的安装部署&quot; class=&quot;headerlink&quot; title=&quot;graylog的安装部署&quot;&gt;&lt;/a&gt;graylog的安装部署&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx平滑升级</title>
    <link href="http://example.com/2022/07/29/nginx/"/>
    <id>http://example.com/2022/07/29/nginx/</id>
    <published>2022-07-29T03:13:29.000Z</published>
    <updated>2022-07-29T04:09:37.632Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nginx平滑升级"><a href="#nginx平滑升级" class="headerlink" title="nginx平滑升级"></a>nginx平滑升级</h4><h5 id="1-把nginx高版本的压缩包拷到服务器上，解压到-x2F-usr-x2F-local-x2F-目录下"><a href="#1-把nginx高版本的压缩包拷到服务器上，解压到-x2F-usr-x2F-local-x2F-目录下" class="headerlink" title="1.把nginx高版本的压缩包拷到服务器上，解压到&#x2F;usr&#x2F;local&#x2F;目录下"></a>1.<strong>把nginx高版本的压缩包拷到服务器上，解压到&#x2F;usr&#x2F;local&#x2F;目录下</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-*.**.*.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure><h5 id="2-进行configure配置并编译"><a href="#2-进行configure配置并编译" class="headerlink" title="2.进行configure配置并编译"></a>2.<strong>进行configure配置并编译</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure  --prefix=/usr/local/nginx/ --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module  --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-threads  --with-stream  --with-stream_ssl_module --with-http_slice_module --with-file-aio --with-http_v2_module</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h5 id="3-把之前的nginx文件备份"><a href="#3-把之前的nginx文件备份" class="headerlink" title="3.把之前的nginx文件备份"></a>3.<strong>把之前的nginx文件备份</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/local/nginx/sbin/nginx nginx.old</span><br></pre></td></tr></table></figure><h5 id="4-然后返回nginx-1-14-2下的objs目录，把新的nginx拷贝过来"><a href="#4-然后返回nginx-1-14-2下的objs目录，把新的nginx拷贝过来" class="headerlink" title="4.然后返回nginx-1.14.2下的objs目录，把新的nginx拷贝过来"></a>4.然后返回nginx-1.14.2下的objs目录，把新的nginx拷贝过来</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/local/nginx-*.**.*/objs/nginx /usr/local/nginx/sbin/</span><br></pre></td></tr></table></figure><p><strong>5.到&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin下查看nginx版本，检出配置文件，启动nginx</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -v   (检查版本)</span><br><span class="line">/usr/local/nginx/sbin/nginx -t  （检查配置文件）</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload （重载）</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;nginx平滑升级&quot;&gt;&lt;a href=&quot;#nginx平滑升级&quot; class=&quot;headerlink&quot; title=&quot;nginx平滑升级&quot;&gt;&lt;/a&gt;nginx平滑升级&lt;/h4&gt;&lt;h5 id=&quot;1-把nginx高版本的压缩包拷到服务器上，解压到-x2F-usr-x2F</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql通过nginx进行映射</title>
    <link href="http://example.com/2022/07/29/mysqlnginx/"/>
    <id>http://example.com/2022/07/29/mysqlnginx/</id>
    <published>2022-07-29T03:13:29.000Z</published>
    <updated>2022-07-29T04:08:29.097Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mysql通过nginx进行映射"><a href="#mysql通过nginx进行映射" class="headerlink" title="mysql通过nginx进行映射"></a>mysql通过nginx进行映射</h4><p>背景：现在nginx1.9以上版本才支持，安装请见nginx平滑升级</p><p>注意编译的时候加上–with-stream </p><p>配置文件配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/local/nginx/stream/mysql.cnf</span><br><span class="line">stream &#123;</span><br><span class="line"></span><br><span class="line">    upstream mysql &#123;</span><br><span class="line">        server 数据库IP:3306(数据库端口) weight=1 max_fails=3 fail_timeout=30s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 3007（映射端口）;</span><br><span class="line">        proxy_connect_timeout 10s;</span><br><span class="line">        proxy_timeout 30s;</span><br><span class="line">        proxy_pass mysql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>nginx重载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;mysql通过nginx进行映射&quot;&gt;&lt;a href=&quot;#mysql通过nginx进行映射&quot; class=&quot;headerlink&quot; title=&quot;mysql通过nginx进行映射&quot;&gt;&lt;/a&gt;mysql通过nginx进行映射&lt;/h4&gt;&lt;p&gt;背景：现在nginx1.9以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sqlserver命令汇总</title>
    <link href="http://example.com/2022/07/29/sqlserver/"/>
    <id>http://example.com/2022/07/29/sqlserver/</id>
    <published>2022-07-29T03:13:29.000Z</published>
    <updated>2022-07-29T04:11:26.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqlserver命令汇总"><a href="#sqlserver命令汇总" class="headerlink" title="sqlserver命令汇总"></a>sqlserver命令汇总</h1><p>1.单用户变为多用户</p>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE master;</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@SQL</span> <span class="type">VARCHAR</span>(MAX);</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@SQL</span><span class="operator">=</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@SQL</span><span class="operator">=</span><span class="variable">@SQL</span><span class="operator">+</span><span class="string">&#x27;; KILL &#x27;</span><span class="operator">+</span>RTRIM(SPID)</span><br><span class="line"><span class="keyword">FROM</span> master..sysprocesses</span><br><span class="line"><span class="keyword">WHERE</span> dbid<span class="operator">=</span>DB_ID(<span class="string">&#x27;uyoufinancial&#x27;</span>);</span><br><span class="line"><span class="keyword">EXEC</span>(<span class="variable">@SQL</span>);</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE uyoufinancial <span class="keyword">SET</span> MULTI_USER;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sqlserver命令汇总&quot;&gt;&lt;a href=&quot;#sqlserver命令汇总&quot; class=&quot;headerlink&quot; title=&quot;sqlserver命令汇总&quot;&gt;&lt;/a&gt;sqlserver命令汇总&lt;/h1&gt;&lt;p&gt;1.单用户变为多用户&lt;/p&gt;
   &lt;figure </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>centos7 下安装redis4.0集群</title>
    <link href="http://example.com/2022/07/29/redis/"/>
    <id>http://example.com/2022/07/29/redis/</id>
    <published>2022-07-29T03:13:29.000Z</published>
    <updated>2022-07-29T04:10:34.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7-下安装redis4-0集群"><a href="#centos7-下安装redis4-0集群" class="headerlink" title="centos7 下安装redis4.0集群"></a>centos7 下安装redis4.0集群</h1><h5 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h5><p>· CentOS版本：CentOS 7</p><p>· 三台主机(IP)：192.168.1.2、192.168.1.3、192.168.1.4</p><p>· Redis版本：4.0.8</p><h5 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、注意事项</h5><p> 2.1、安裝 GCC 编译工具 不然会有编译不过的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc g++ gcc-c++ make</span><br></pre></td></tr></table></figure><p> 2.2、升级所有的包，防止出现版本过久不兼容问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><h5 id="下载，解压，编译安装"><a href="#下载，解压，编译安装" class="headerlink" title="下载，解压，编译安装"></a>下载，解压，编译安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">wget http://download.redis.io/releases/redis-*.*.*.tar.gz</span><br><span class="line">ar xzf redis-*.*.*.tar.gz</span><br><span class="line">cd redis-*.*.*.</span><br><span class="line">make</span><br><span class="line">如果因为上次编译失败，有残留的文件</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make distclean</span></span><br></pre></td></tr></table></figure><h5 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h5><p>1.首先在 第一台机器上 &#x2F;opt&#x2F;redis- <em>.</em>.*.目录下创建 redis-cluster 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/redis-*/redis-cluster</span><br></pre></td></tr></table></figure><p>2.在 redis-cluster 目录下，创建名为7000、7001、7002的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/redis-*/redis-cluster\</span><br><span class="line">mkdir 7000 7001 7002</span><br></pre></td></tr></table></figure><p>3.分别修改这三个配置文件，把如下redis.conf 配置内容粘贴进去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi 7000/redis.conf</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi 7001/redis.conf</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi 7002/redis.conf</span></span><br><span class="line">redis.conf 配置</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">端口7000,7001,7002</span></span><br><span class="line">port 7000</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认ip为127.0.0.1，需要改为其他节点机器可访问的ip，否则创建集群时无法访问对应的端口，无法创建集群</span></span><br><span class="line">bind 本机IP</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">redis后台运行</span></span><br><span class="line">daemonize yes </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pidfile文件对应7000，7001，7002</span></span><br><span class="line">pidfile /var/run/redis_7000.pid</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启集群，把注释<span class="comment">#去掉</span></span></span><br><span class="line">cluster-enabled yes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">集群的配置，配置文件首次启动自动生成 7000，7001，7002</span>     </span><br><span class="line">cluster-config-file nodes_7000.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">请求超时，默认15秒，可自行设置</span></span><br><span class="line">luster-node-timeout 10100</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">aof日志开启，有需要就开启，它会每次写操作都记录一条日志</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><p>接着在另外两台机器上(10.91.250.147，10.91.250.148)重复以上三步，只是把目录改为7003、7004、7005、7006、7007、7008对应的配置文件也按照这个规则修改即可</p><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><p>#第一台机器上执行 3个节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="keyword">for</span>((i=0;i&lt;=2;i++)); <span class="keyword">do</span> /opt/redis-*/src/redis-server /opt/redis-*/redis-cluster/700<span class="variable">$i</span>/redis.conf; <span class="keyword">done</span></span></span><br></pre></td></tr></table></figure><p>#第二台机器上执行 3个节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="keyword">for</span>((i=3;i&lt;=5;i++)); <span class="keyword">do</span> /opt/redis*/src/redis-server /opt/redis-*/redis-cluster/700<span class="variable">$i</span>/redis.conf; <span class="keyword">done</span></span></span><br></pre></td></tr></table></figure><p>#第三台机器上执行 3个节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="keyword">for</span>((i=6;i&lt;=8;i++)); <span class="keyword">do</span> /opt/redi*/src/redis-server /opt/redis-*/redis-cluster/700<span class="variable">$i</span>/redis.conf; <span class="keyword">done</span></span></span><br></pre></td></tr></table></figure><h3 id="检查服务"><a href="#检查服务" class="headerlink" title="检查服务"></a>检查服务</h3><p>检查各 Redis 各个节点启动情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis           //redis是否启动成功</span><br><span class="line">netstat -tnlp | grep redis    //监听redis端口</span><br></pre></td></tr></table></figure><h3 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h3><p>redis-trib.rb 这个工具构建redis集群的时候，redis requires Ruby version &gt;&#x3D; 2.2.2</p><p>(无外网的话要进行ruby的下载解压进行cp)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget http://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.5.tar.gz</span><br><span class="line">tar zxvf  ruby-2.3.5.tar.gz</span><br><span class="line">cd ruby-2.3.5</span><br><span class="line">./configure  --prefix=/opt/ruby</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">ln -s /opt/ruby/bin/ruby /usr/bin/ruby</span><br><span class="line">ln -s /opt/ruby/bin/gem /usr/bin/gem</span><br><span class="line">ruby -v　</span><br></pre></td></tr></table></figure><h5 id="安装rubygem-redis依赖"><a href="#安装rubygem-redis依赖" class="headerlink" title="安装rubygem redis依赖"></a>安装rubygem redis依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://rubygems.org/downloads/redis-3.3.0.gem</span><br><span class="line">gem install -l redis-3.3.0.gem</span><br></pre></td></tr></table></figure><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>注意：在任意一台上运行，不要在每台机器上都运行，一台就够了，</p><p>Redis 官方提供了 redis-trib.rb 这个工具，就在解压目录的 src 目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> /redis/redis-*/src/redis-trib.rb create --replicas 1 IP</span><br><span class="line">1:7000 IP1:7001 IP1:7002 IP2:7003 IP2:7004 IP2:7005 IP3:7006 IP3:7007 IP3:7008</span><br></pre></td></tr></table></figure><p>出现以下内容</p><p>[root@localhost redis-cluster]# &#x2F;opt&#x2F;redis&#x2F;redis-*&#x2F;src&#x2F;redis-trib.rb create –replicas 1 IP<br>1:7000 IP1:7001 IP1:7002 IP2:7003 IP2:7004 IP2:7005 IP3:7006 IP3:7007 IP3:7008</p><p>&gt;&gt;&gt; Creating cluster</p><p>&gt;&gt;&gt; Performing hash slots allocation on 9 nodes…</p><p>Using 4 masters:10.91.250.146:700010.91.250.147:700310.91.250.148:700610.91.250.146:7001</p><p>Adding replica 10.91.250.147:7004 to 10.91.250.146:7000</p><p>Adding replica 10.91.250.148:7007 to 10.91.250.147:7003</p><p>Adding replica 10.91.250.146:7002 to 10.91.250.148:7006</p><p>Adding replica 10.91.250.147:7005 to 10.91.250.146:7001</p><p>Adding replica 10.91.250.148:7008 to 10.91.250.146:7000M: 7c622ac191edd40dd61d9b79b27f6f69d02a5bbf 10.91.250.146:7000  slots:0-4095 (4096 slots) masterM: 44c81c15b01d992cb9ede4ad35477ec853d70723 10.91.250.146:7001  slots:12288-16383 (4096 slots) masterS: 38f03c27af39723e1828eb62d1775c4b6e2c3638 10.91.250.146:7002</p><p>  replicates f1abb62a8c9b448ea14db421bdfe3f1d8075189cM: 987965baf505a9aa43e50e46c76189c51a8f17ec 10.91.250.147:7003  slots:4096-8191 (4096 slots) masterS: 6555292fed9c5d52fcf5b983c441aff6f96923d5 10.91.250.147:7004</p><p>  replicates 7c622ac191edd40dd61d9b79b27f6f69d02a5bbfS: 2b5ba254a0405d4efde4c459867b15176f79244a 10.91.250.147:7005</p><p>  replicates 44c81c15b01d992cb9ede4ad35477ec853d70723M: f1abb62a8c9b448ea14db421bdfe3f1d8075189c 10.91.250.148:7006  slots:8192-12287 (4096 slots) masterS: eb4067373d36d8a8df07951f92794e67a6aac022 10.91.250.148:7007</p><p>  replicates 987965baf505a9aa43e50e46c76189c51a8f17ecS: 2919e041dd3d1daf176d6800dcd262f4e727f366 10.91.250.148:7008</p><p>  replicates 7c622ac191edd40dd61d9b79b27f6f69d02a5bbf</p><h4 id="Can-I-set-the-above-configuration-type-‘yes’-to-accept-yes"><a href="#Can-I-set-the-above-configuration-type-‘yes’-to-accept-yes" class="headerlink" title="Can I set the above configuration? (type ‘yes’ to accept): yes"></a>Can I set the above configuration? (type ‘yes’ to accept): yes</h4><h4 id="输入yes"><a href="#输入yes" class="headerlink" title="输入yes"></a>输入yes</h4><p>看到这个就表示集群创建成功</p><p>Check for open slots</p><p>&gt;&gt;&gt;Check slots coverage…[OK]  All 16384  slots   covered</p><h3 id="关闭集群"><a href="#关闭集群" class="headerlink" title="关闭集群"></a>关闭集群</h3><p>这样也可以，推荐</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill redis</span><br></pre></td></tr></table></figure><p>循环节点逐个关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="keyword">for</span>((i=0;i&lt;=2;i++)); <span class="keyword">do</span> /opt/redis-4.0.8/src/redis-cli -c -h 10.91.250.146 -p 700<span class="variable">$i</span> shutdown; <span class="keyword">done</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="keyword">for</span>((i=3;i&lt;=5;i++)); <span class="keyword">do</span> /opt/redis-4.0.8/src/redis-cli -c -h 10.91.250.147 -p 700<span class="variable">$i</span> shutdown; <span class="keyword">done</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="keyword">for</span>((i=6;i&lt;=8;i++)); <span class="keyword">do</span> /opt/redis-4.0.8/src/redis-cli -c -h 10.91.250.148 -p 700<span class="variable">$i</span> shutdown; <span class="keyword">done</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="集群验证"><a href="#集群验证" class="headerlink" title="集群验证"></a>集群验证</h3><h4 id="连接集群测试"><a href="#连接集群测试" class="headerlink" title="连接集群测试"></a>连接集群测试</h4><p>参数 -C 可连接到集群，因为 redis.conf 将 bind 改为了ip地址，所以 -h 参数不可以省略，-p 参数为端口号</p><p>我们在10.91.250.146机器redis 7000 的节点set 一个key</p><p>&#x2F;opt&#x2F;redis-4.0.8&#x2F;src&#x2F;redis-cli -h IP -c -p 7000</p><p>IP:7000&gt; cluster nodes</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;centos7-下安装redis4-0集群&quot;&gt;&lt;a href=&quot;#centos7-下安装redis4-0集群&quot; class=&quot;headerlink&quot; title=&quot;centos7 下安装redis4.0集群&quot;&gt;&lt;/a&gt;centos7 下安装redis4.0集群&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>zabbix的安装部署</title>
    <link href="http://example.com/2022/07/29/zabbix/"/>
    <id>http://example.com/2022/07/29/zabbix/</id>
    <published>2022-07-29T03:13:29.000Z</published>
    <updated>2022-07-29T04:21:03.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-2-1zabbix的安装部署"><a href="#1-2-1zabbix的安装部署" class="headerlink" title="1.2.1zabbix的安装部署"></a>1.2.1zabbix的安装部署</h1><h2 id="一、server端（监控端）安装配置"><a href="#一、server端（监控端）安装配置" class="headerlink" title="一、server端（监控端）安装配置"></a>一、server端（监控端）安装配置</h2><p>1.永久关闭防火墙和selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld关闭防火墙</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld永久关闭防火墙</span><br><span class="line">[root@localhost ~]# setenforce 0临时关闭</span><br><span class="line">[root@localhost ~]# vi /etc/selinux/config永久关闭</span><br><span class="line">                    SELINUX=enforcing修改为&quot;SELINUX=disabled&quot;</span><br></pre></td></tr></table></figure><p>2.安装zabbix的yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Zabbix源:</span><br><span class="line">[root@localhost ~]#rpm -ivh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm</span><br><span class="line">epel源：[root@localhost ~]#wget https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">阿里源: </span><br><span class="line">[root@localhost ~]#curl –o /etc/yum.repos.d/Ali.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.安装zabbix服务器 前端 代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#yum –y install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br><span class="line">安装mariadb：</span><br><span class="line">[root@localhost ~]#yum install –y mariadb mariadb-server</span><br><span class="line">启动mariadb：</span><br><span class="line">[root@localhost ~]#systemctl start mariadb</span><br><span class="line">初始化mariadb：</span><br><span class="line">[root@localhost ~]#mysql_secure_installation</span><br><span class="line"></span><br><span class="line">1.回车，如果不行，输入原来的数据库root密码然后回车</span><br><span class="line">2.按Y（是否设置root密码）</span><br><span class="line">newpassword：密码</span><br><span class="line">3.</span><br><span class="line">4.</span><br><span class="line">.....全程回车</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.创建初始数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">登陆mariadb</span><br><span class="line">[root@localhost ~]# mysql –u root –p‘密码’</span><br><span class="line">创建一个zabbix数据库并且设置字符集：</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create database zabbix character srt utf8 collate utf8_bin;</span></span><br><span class="line"></span><br><span class="line">创建一个用户zabbix并设置权限允许该用户访问的库和密码：</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on zabbix.* to zabbix@’%’identified by ‘zabbix’; ----给用户设置密码</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">flush privileges; -----刷新授权表</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit;-----退出</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.导入的初始架构和数据。将提示您输入新创建的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql – uzabbix –p zabbix </span><br><span class="line">输入密码：zabbix</span><br><span class="line">zcat：看所有包的内容但是不会解压缩。</span><br></pre></td></tr></table></figure><p>6.zabbix服务器端配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#vim /etc/zabbix/zabbix_server.conf</span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=zabbix -------zabbix mysql里面的用户的密码</span><br><span class="line"></span><br><span class="line">这里的配置文件打开后：如果有的就不用添加了。如果是注释了的也不用取消注释。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>7.Zabbix服务器和代理服务器进程启动，设置开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start zabbix-server zabbix-agent httpd</span><br><span class="line">[root@localhost ~]# systemctl enable zabbix-server zabbix-agent httpd</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8.配置php zabbix 前端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Apache的配置文件为Zabbix前端位于/etc/ httpd / conf.d/zabbix.conf一些PHP设置已经配置好了。但是有必要取消“日期。时区”设置正确的时区。</span><br><span class="line">[root@localhost ~]# vim /etc/httpd/conf.d/zabbix.conf</span><br><span class="line">php_value max_execution_time 300</span><br><span class="line">php_value memory_limit 128M</span><br><span class="line">php_value post_max_size 16M</span><br><span class="line">php_value upload_max_filesize 2M</span><br><span class="line">php_value max_input_time 300</span><br><span class="line">php_value always_populate_raw_post_data -1</span><br><span class="line">[root@localhost ~]# php_value date.timezone Europe/Riga</span><br><span class="line">php_value date.timezone Asia/Shanghai -------时区设置为亚洲上海</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>9.重新启动httpd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl restart zabbix-server zabbix-agent httpd mariadb (mysqld)</span><br></pre></td></tr></table></figure><p>10.访问zabbix</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在浏览器访问ip/zabbix：</span><br><span class="line">并且进行设置：就第一步输入mysql密码。然后一直下一步。</span><br><span class="line">最后登陆：</span><br><span class="line">username: Admin</span><br><span class="line">password: zabbix</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、agent（被监控端）端安装配置"><a href="#二、agent（被监控端）端安装配置" class="headerlink" title="二、agent（被监控端）端安装配置"></a>二、agent（被监控端）端安装配置</h2><h3 id="centos7"><a href="#centos7" class="headerlink" title="centos7"></a>centos7</h3><p>1.永久关闭防火墙和selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld关闭防火墙</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld永久关闭防火墙</span><br><span class="line">[root@localhost ~]# setenforce 0临时关闭</span><br><span class="line">[root@localhost ~]# vi /etc/selinux/config永久关闭</span><br><span class="line">                    SELINUX=enforcing修改为&quot;SELINUX=disabled&quot;</span><br></pre></td></tr></table></figure><p>2.安装zabbix的yum源.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Zabbix源:</span><br><span class="line">[root@localhost ~]#rpm -ivh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm</span><br><span class="line">epel源：</span><br><span class="line">[root@localhost ~]#wget https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">阿里源: </span><br><span class="line">[root@localhost ~]#curl –o /etc/yum.repos.d/Ali.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>3.安装zabbix-agent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum –y install zabbix-agent</span><br></pre></td></tr></table></figure><p>4.编辑配置文件修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">Server=服务器IP  被动模式 zabbix-server-ip 可以添加多个ip，可以被多台机器监控</span><br><span class="line">ServerActive=服务器IP  主动模式 zabbix-server-ip</span><br><span class="line">Hostname=web1 -------被监控机器的主机名称</span><br><span class="line">UnsafeUserParameters=1 ---添加是否限制用户自定义 keys 使用特殊字符</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.启动服务并设置开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start zabbix-agent</span><br><span class="line">[root@localhost ~]# systemctl enable zabbix-agent</span><br><span class="line">查看端口： </span><br><span class="line">[root@localhost ~]# ss -anlp |grep :10050</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><p>1.导入源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Ubuntu 18.04</span></span></span><br><span class="line">[aisidi@localhost ~]# sudo wget https://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_3.4-1+bionic_all.deb</span><br><span class="line">[aisidi@localhost ~]# sudo dpkg -i zabbix-release_3.4-1+bionic_all.deb</span><br><span class="line">[aisidi@localhost ~]# sudo apt update</span><br><span class="line">---</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Ubuntu 16.04</span></span></span><br><span class="line">[aisidi@localhost ~]# sudo wget https://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_3.4-1+xenial_all.deb</span><br><span class="line">[aisidi@localhost ~]# sudo dpkg -i zabbix-release_3.4-1+xenial_all.deb</span><br><span class="line">[aisidi@localhost ~]# sudo apt update</span><br><span class="line">---</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Ubuntu 14.04</span></span></span><br><span class="line">[aisidi@localhost ~]# sudo wget https://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_3.4-1+trusty_all.deb</span><br><span class="line">[aisidi@localhost ~]# sudo dpkg -i zabbix-release_3.4-1+trusty_all.deb</span><br><span class="line">[aisidi@localhost ~]# sudo apt update</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[aisidi@localhost ~]#sudo apt-get install -y zabbix-agent</span><br></pre></td></tr></table></figure><p>3.配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[aisidi@localhost ~]# sudo vim /etc/zabbix/zabbix_agentd.conf </span><br><span class="line">server=serverIP</span><br><span class="line">ServerActive=serverIP</span><br><span class="line">hostname=ubuntu（在zabbix-server上的主机要一致）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[aisidi@localhost ~]#sudo /etc/init.d/zabbix-agent start</span><br></pre></td></tr></table></figure><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>1.zabbix-agent下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.zabbix.com/downloads/3.4.0/zabbix_agents_3.4.0.win.zip</span></span><br><span class="line">解压到C盘，并重命名目录为zabbix</span><br></pre></td></tr></table></figure><p>2.配置zabbix-agent.win.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">找到conf下的配置文件 zabbix_agentd.win.conf ，修改LogFile、Server、ServerActive 、Hostname这几个参数。具体配置如下：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移动到C盘的zabbix目录下conf目录下，编辑zabbix_agentd.win.conf，修改下面几个参数</span></span><br><span class="line">Server=serverIP</span><br><span class="line">ServerActive=serverIP</span><br><span class="line">Hostname=Windows</span><br><span class="line">修改好配置文件后，用CMD（需有管理员权限）将Zabbix Agent安装为Windows系统的服务，在windows控制台下执行以下命令：</span><br><span class="line">C:\zabbix\bin\win64\zabbix_agentd.exe -i -c C:\zabbix\conf\zabbix_agentd.win.conf</span><br><span class="line">控制台输出信息如下，表示安装成功：</span><br><span class="line">zabbix_agentd.exe [4864]: service [Zabbix Agent] installed successfully</span><br><span class="line">zabbix_agentd.exe [4864]: event source [Zabbix Agent] installed successfully</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.启动zabbix-agent客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\zabbix\bin\win64\zabbix_agentd.exe -c C:\zabbix\conf\zabbix_agentd.win.conf -s</span><br><span class="line">• 控制台输出下面信息，表示安装成功:</span><br><span class="line">zabbix_agentd.exe [<span class="number">11052</span>]: service [Zabbix Agent] started s</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="centos-6"><a href="#centos-6" class="headerlink" title="centos 6"></a>centos 6</h3><p>1.下载rpm包 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#cd /opt </span><br><span class="line">[root@localhost ~]#wget http://repo.zabbix.com/zabbix/3.0/rhel/6/x86_64/zabbix-agent-3.0.4-1.el6.x86_64.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.安装zabbix_agentd </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#yum localinstall zabbix-agent-3.0.4-1.el6.x86_64.rpm</span><br></pre></td></tr></table></figure><p>3.修改zabbix_agentd.conf </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">修改一下几项内容： </span><br><span class="line">Server= #填写zabbix服务器IP地址</span><br><span class="line">ServerActive=#填写zabbix服务器IP地址</span><br><span class="line">hostname=填写与客户端一致的主机名</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.启动zabbix_agentd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">因为我们这里直接安装的rpm包所以在/etc/init.d/目录下生成开机脚本 </span><br><span class="line">直接执行/etc/init.d/zabbix_agentd start 就ok。</span><br><span class="line">[root@localhost ~]# /etc/init.d/zabbix_agentd start</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果在服务器端上没看到数据的话就看看是不是端口未开放</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">centos6开放端口</span><br><span class="line">[root@localhost ~]#/sbin/iptables -I INPUT -p tcp --dport 10050 -j ACCEPT //开放端口</span><br><span class="line">[root@localhost ~]#/etc/rc.d/init.d/iptables save //保存</span><br><span class="line">[root@localhost ~]#/etc/init.d/iptables status //查看</span><br><span class="line">如果使用安装包安装，解压之后用rpm –ivh安装，配置和yum安装一样</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-2-1zabbix的安装部署&quot;&gt;&lt;a href=&quot;#1-2-1zabbix的安装部署&quot; class=&quot;headerlink&quot; title=&quot;1.2.1zabbix的安装部署&quot;&gt;&lt;/a&gt;1.2.1zabbix的安装部署&lt;/h1&gt;&lt;h2 id=&quot;一、server端</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>榕宝</title>
    <link href="http://example.com/2022/07/29/%E6%A6%95%E5%AE%9D/"/>
    <id>http://example.com/2022/07/29/%E6%A6%95%E5%AE%9D/</id>
    <published>2022-07-29T03:13:29.000Z</published>
    <updated>2022-07-29T04:10:17.176Z</updated>
    
    <content type="html"><![CDATA[<p>爱做饭给榕宝吃，做一辈子的饭。</p><p>重要的不是什么都拥有，而是你想要的恰好在身边</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;爱做饭给榕宝吃，做一辈子的饭。&lt;/p&gt;
&lt;p&gt;重要的不是什么都拥有，而是你想要的恰好在身边&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
